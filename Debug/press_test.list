
press_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d28  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007ebc  08007ebc  00008ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f1c  08007f1c  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f1c  08007f1c  00008f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f24  08007f24  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f24  08007f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007f2c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc4  200000fc  08008028  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc0  08008028  00009dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109e0  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003224  00000000  00000000  00019b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a17  00000000  00000000  0001dac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194d3  00000000  00000000  0001e4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e8f  00000000  00000000  000379aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927f7  00000000  00000000  00049839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  000dc074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000df6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007ea4 	.word	0x08007ea4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007ea4 	.word	0x08007ea4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fad9 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f847 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f921 	bl	8000718 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d6:	f000 f8ff 	bl	80006d8 <MX_DMA_Init>
  MX_ADC1_Init();
 80004da:	f000 f8ab 	bl	8000634 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004de:	f006 ff9b 	bl	8007418 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      Read_Pressure_Data();  // 압력 센서 값 읽기
 80004e2:	f000 f933 	bl	800074c <Read_Pressure_Data>

      // sensorValues를 data_buffer에 복사
      for (int i = 0; i < NUM_SENSORS; i++) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	e023      	b.n	8000534 <main+0x70>
          data_buffer[i * 4]     = (sensorValues[i] >> 24) & 0xFF;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4a19      	ldr	r2, [pc, #100]	@ (8000558 <main+0x94>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	54d1      	strb	r1, [r2, r3]
          data_buffer[i * 4 + 1] = (sensorValues[i] >> 16) & 0xFF;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	3301      	adds	r3, #1
 80004fc:	4a16      	ldr	r2, [pc, #88]	@ (8000558 <main+0x94>)
 80004fe:	2100      	movs	r1, #0
 8000500:	54d1      	strb	r1, [r2, r3]
          data_buffer[i * 4 + 2] = (sensorValues[i] >> 8) & 0xFF;
 8000502:	4a16      	ldr	r2, [pc, #88]	@ (800055c <main+0x98>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800050a:	0a1b      	lsrs	r3, r3, #8
 800050c:	b29a      	uxth	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	3302      	adds	r3, #2
 8000514:	b2d1      	uxtb	r1, r2
 8000516:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <main+0x94>)
 8000518:	54d1      	strb	r1, [r2, r3]
          data_buffer[i * 4 + 3] = sensorValues[i] & 0xFF;
 800051a:	4a10      	ldr	r2, [pc, #64]	@ (800055c <main+0x98>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	3303      	adds	r3, #3
 8000528:	b2d1      	uxtb	r1, r2
 800052a:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <main+0x94>)
 800052c:	54d1      	strb	r1, [r2, r3]
      for (int i = 0; i < NUM_SENSORS; i++) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b03      	cmp	r3, #3
 8000538:	ddd8      	ble.n	80004ec <main+0x28>
      }

      // CDC 통신으로 전송
      if (CDC_Transmit_FS(data_buffer, sizeof(data_buffer)) == USBD_OK) {
 800053a:	2110      	movs	r1, #16
 800053c:	4806      	ldr	r0, [pc, #24]	@ (8000558 <main+0x94>)
 800053e:	f007 f829 	bl	8007594 <CDC_Transmit_FS>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d103      	bne.n	8000550 <main+0x8c>
          HAL_Delay(100);  // 데이터 전송 주기
 8000548:	2064      	movs	r0, #100	@ 0x64
 800054a:	f000 fb0b 	bl	8000b64 <HAL_Delay>
 800054e:	e7c8      	b.n	80004e2 <main+0x1e>
      } else {
          HAL_Delay(10);  // 실패 시 재시도 대기
 8000550:	200a      	movs	r0, #10
 8000552:	f000 fb07 	bl	8000b64 <HAL_Delay>
      Read_Pressure_Data();  // 압력 센서 값 읽기
 8000556:	e7c4      	b.n	80004e2 <main+0x1e>
 8000558:	200001c8 	.word	0x200001c8
 800055c:	200001c0 	.word	0x200001c0

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 fc6c 	bl	8007e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	@ (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	@ (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005ac:	4a20      	ldr	r2, [pc, #128]	@ (8000630 <SystemClock_Config+0xd0>)
 80005ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000630 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d4:	2310      	movs	r3, #16
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005d8:	23c0      	movs	r3, #192	@ 0xc0
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 ffcb 	bl	8003584 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 f90e 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fa2e 	bl	8003a74 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f8f9 	bl	8000814 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	@ 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000646:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_ADC1_Init+0x98>)
 8000648:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <MX_ADC1_Init+0x9c>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000652:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065e:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_ADC1_Init+0x98>)
 8000674:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <MX_ADC1_Init+0xa0>)
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_ADC1_Init+0x98>)
 8000680:	2201      	movs	r2, #1
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_ADC1_Init+0x98>)
 800068e:	2201      	movs	r2, #1
 8000690:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000692:	480e      	ldr	r0, [pc, #56]	@ (80006cc <MX_ADC1_Init+0x98>)
 8000694:	f000 fa8a 	bl	8000bac <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800069e:	f000 f8b9 	bl	8000814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80006aa:	2306      	movs	r3, #6
 80006ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <MX_ADC1_Init+0x98>)
 80006b4:	f000 fd6c 	bl	8001190 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006be:	f000 f8a9 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000118 	.word	0x20000118
 80006d0:	40012000 	.word	0x40012000
 80006d4:	0f000001 	.word	0x0f000001

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_DMA_Init+0x3c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <MX_DMA_Init+0x3c>)
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_DMA_Init+0x3c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2038      	movs	r0, #56	@ 0x38
 8000700:	f001 f849 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000704:	2038      	movs	r0, #56	@ 0x38
 8000706:	f001 f862 	bl	80017ce <HAL_NVIC_EnableIRQ>

}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_GPIO_Init+0x30>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a08      	ldr	r2, [pc, #32]	@ (8000748 <MX_GPIO_Init+0x30>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_GPIO_Init+0x30>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <Read_Pressure_Data>:

/* USER CODE BEGIN 4 */
void Read_Pressure_Data(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < NUM_SENSORS; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	e04a      	b.n	80007fa <Read_Pressure_Data+0xae>
        // ADC 채널을 각 센서 핀에 맞게 설정 (IN0, IN1, IN4, IN5)
        switch(i) {
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d816      	bhi.n	8000798 <Read_Pressure_Data+0x4c>
 800076a:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <Read_Pressure_Data+0x24>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	08000781 	.word	0x08000781
 8000774:	08000787 	.word	0x08000787
 8000778:	0800078d 	.word	0x0800078d
 800077c:	08000793 	.word	0x08000793
            case 0: sConfig.Channel = ADC_CHANNEL_0; break; // IN0
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	e008      	b.n	8000798 <Read_Pressure_Data+0x4c>
            case 1: sConfig.Channel = ADC_CHANNEL_1; break; // IN1
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	e005      	b.n	8000798 <Read_Pressure_Data+0x4c>
            case 2: sConfig.Channel = ADC_CHANNEL_4; break; // IN4
 800078c:	2304      	movs	r3, #4
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	e002      	b.n	8000798 <Read_Pressure_Data+0x4c>
            case 3: sConfig.Channel = ADC_CHANNEL_5; break; // IN5
 8000792:	2305      	movs	r3, #5
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	bf00      	nop
        }

        sConfig.Rank = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
        sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800079c:	2301      	movs	r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4819      	ldr	r0, [pc, #100]	@ (800080c <Read_Pressure_Data+0xc0>)
 80007a6:	f000 fcf3 	bl	8001190 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <Read_Pressure_Data+0x68>
            Error_Handler();
 80007b0:	f000 f830 	bl	8000814 <Error_Handler>
        }

        if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 80007b4:	4815      	ldr	r0, [pc, #84]	@ (800080c <Read_Pressure_Data+0xc0>)
 80007b6:	f000 fa3d 	bl	8000c34 <HAL_ADC_Start>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d117      	bne.n	80007f0 <Read_Pressure_Data+0xa4>
            if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007c4:	4811      	ldr	r0, [pc, #68]	@ (800080c <Read_Pressure_Data+0xc0>)
 80007c6:	f000 fb1c 	bl	8000e02 <HAL_ADC_PollForConversion>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d109      	bne.n	80007e4 <Read_Pressure_Data+0x98>

            	sensorValues[i] = HAL_ADC_GetValue(&hadc1);
 80007d0:	480e      	ldr	r0, [pc, #56]	@ (800080c <Read_Pressure_Data+0xc0>)
 80007d2:	f000 fcb1 	bl	8001138 <HAL_ADC_GetValue>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b299      	uxth	r1, r3
 80007da:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <Read_Pressure_Data+0xc4>)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007e2:	e001      	b.n	80007e8 <Read_Pressure_Data+0x9c>
            } else {
                Error_Handler();
 80007e4:	f000 f816 	bl	8000814 <Error_Handler>
            }
            HAL_ADC_Stop(&hadc1);
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <Read_Pressure_Data+0xc0>)
 80007ea:	f000 fad7 	bl	8000d9c <HAL_ADC_Stop>
 80007ee:	e001      	b.n	80007f4 <Read_Pressure_Data+0xa8>
        } else {
            Error_Handler();
 80007f0:	f000 f810 	bl	8000814 <Error_Handler>
    for (int i = 0; i < NUM_SENSORS; i++) {
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	ddb1      	ble.n	8000764 <Read_Pressure_Data+0x18>
        }
    }
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000118 	.word	0x20000118
 8000810:	200001c0 	.word	0x200001c0

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	4a0f      	ldr	r2, [pc, #60]	@ (800086c <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	6453      	str	r3, [r2, #68]	@ 0x44
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a32      	ldr	r2, [pc, #200]	@ (8000958 <HAL_ADC_MspInit+0xe8>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d15e      	bne.n	8000950 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b31      	ldr	r3, [pc, #196]	@ (800095c <HAL_ADC_MspInit+0xec>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	4a30      	ldr	r2, [pc, #192]	@ (800095c <HAL_ADC_MspInit+0xec>)
 800089c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a2:	4b2e      	ldr	r3, [pc, #184]	@ (800095c <HAL_ADC_MspInit+0xec>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <HAL_ADC_MspInit+0xec>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a29      	ldr	r2, [pc, #164]	@ (800095c <HAL_ADC_MspInit+0xec>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b27      	ldr	r3, [pc, #156]	@ (800095c <HAL_ADC_MspInit+0xec>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008ca:	2333      	movs	r3, #51	@ 0x33
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4820      	ldr	r0, [pc, #128]	@ (8000960 <HAL_ADC_MspInit+0xf0>)
 80008de:	f001 fa7b 	bl	8001dd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80008e2:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 80008e4:	4a20      	ldr	r2, [pc, #128]	@ (8000968 <HAL_ADC_MspInit+0xf8>)
 80008e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 80008fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000900:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 8000904:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000908:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 800090c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000910:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000924:	480f      	ldr	r0, [pc, #60]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 8000926:	f000 ff6d 	bl	8001804 <HAL_DMA_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000930:	f7ff ff70 	bl	8000814 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 8000938:	639a      	str	r2, [r3, #56]	@ 0x38
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_ADC_MspInit+0xf4>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2012      	movs	r0, #18
 8000946:	f000 ff26 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800094a:	2012      	movs	r0, #18
 800094c:	f000 ff3f 	bl	80017ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	@ 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40012000 	.word	0x40012000
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000
 8000964:	20000160 	.word	0x20000160
 8000968:	40026410 	.word	0x40026410

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f8af 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <ADC_IRQHandler+0x10>)
 80009d2:	f000 faa1 	bl	8000f18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000118 	.word	0x20000118

080009e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <DMA2_Stream0_IRQHandler+0x10>)
 80009e6:	f000 ffbb 	bl	8001960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000160 	.word	0x20000160

080009f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f8:	4802      	ldr	r0, [pc, #8]	@ (8000a04 <OTG_FS_IRQHandler+0x10>)
 80009fa:	f001 fcb5 	bl	8002368 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200016bc 	.word	0x200016bc

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f007 f9ff 	bl	8007e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fd31 	bl	80004c4 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a70:	08007f2c 	.word	0x08007f2c
  ldr r2, =_sbss
 8000a74:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a78:	20001dc0 	.word	0x20001dc0

08000a7c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <DMA1_Stream0_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 fe69 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff feb4 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fe81 	bl	80017ea <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b00:	f000 fe49 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200001d8 	.word	0x200001d8

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200001d8 	.word	0x200001d8

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e033      	b.n	8000c2a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d109      	bne.n	8000bde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fe50 	bl	8000870 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d118      	bne.n	8000c1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bf2:	f023 0302 	bic.w	r3, r3, #2
 8000bf6:	f043 0202 	orr.w	r2, r3, #2
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f000 fbe8 	bl	80013d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f023 0303 	bic.w	r3, r3, #3
 8000c12:	f043 0201 	orr.w	r2, r3, #1
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c1a:	e001      	b.n	8000c20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Start+0x1a>
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	e097      	b.n	8000d7e <HAL_ADC_Start+0x14a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d018      	beq.n	8000c96 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0201 	orr.w	r2, r2, #1
 8000c72:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c74:	4b45      	ldr	r3, [pc, #276]	@ (8000d8c <HAL_ADC_Start+0x158>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a45      	ldr	r2, [pc, #276]	@ (8000d90 <HAL_ADC_Start+0x15c>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	0c9a      	lsrs	r2, r3, #18
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000c88:	e002      	b.n	8000c90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f9      	bne.n	8000c8a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d15f      	bne.n	8000d64 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ce2:	d106      	bne.n	8000cf2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce8:	f023 0206 	bic.w	r2, r3, #6
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	645a      	str	r2, [r3, #68]	@ 0x44
 8000cf0:	e002      	b.n	8000cf8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d00:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <HAL_ADC_Start+0x160>)
 8000d02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000d0c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10f      	bne.n	8000d3a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d129      	bne.n	8000d7c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	e020      	b.n	8000d7c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a16      	ldr	r2, [pc, #88]	@ (8000d98 <HAL_ADC_Start+0x164>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d11b      	bne.n	8000d7c <HAL_ADC_Start+0x148>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d114      	bne.n	8000d7c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	e00b      	b.n	8000d7c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	f043 0210 	orr.w	r2, r3, #16
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d74:	f043 0201 	orr.w	r2, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	431bde83 	.word	0x431bde83
 8000d94:	40012300 	.word	0x40012300
 8000d98:	40012000 	.word	0x40012000

08000d9c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Stop+0x16>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e021      	b.n	8000df6 <HAL_ADC_Stop+0x5a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0201 	bic.w	r2, r2, #1
 8000dc8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d109      	bne.n	8000dec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	f043 0201 	orr.w	r2, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e1e:	d113      	bne.n	8000e48 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e2e:	d10b      	bne.n	8000e48 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f043 0220 	orr.w	r2, r3, #32
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e063      	b.n	8000f10 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e48:	f7ff fe80 	bl	8000b4c <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e4e:	e021      	b.n	8000e94 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e56:	d01d      	beq.n	8000e94 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d007      	beq.n	8000e6e <HAL_ADC_PollForConversion+0x6c>
 8000e5e:	f7ff fe75 	bl	8000b4c <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d212      	bcs.n	8000e94 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d00b      	beq.n	8000e94 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f043 0204 	orr.w	r2, r3, #4
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e03d      	b.n	8000f10 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d1d6      	bne.n	8000e50 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f06f 0212 	mvn.w	r2, #18
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d123      	bne.n	8000f0e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d11f      	bne.n	8000f0e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d111      	bne.n	8000f0e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d105      	bne.n	8000f0e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d049      	beq.n	8000fe2 <HAL_ADC_IRQHandler+0xca>
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d046      	beq.n	8000fe2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d12b      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d127      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f88:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d119      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0220 	bic.w	r2, r2, #32
 8000fac:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d105      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f8bd 	bl	8001152 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f06f 0212 	mvn.w	r2, #18
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d057      	beq.n	80010a8 <HAL_ADC_IRQHandler+0x190>
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d054      	beq.n	80010a8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d139      	bne.n	8001098 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800103c:	2b00      	cmp	r3, #0
 800103e:	d12b      	bne.n	8001098 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800104a:	2b00      	cmp	r3, #0
 800104c:	d124      	bne.n	8001098 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001058:	2b00      	cmp	r3, #0
 800105a:	d11d      	bne.n	8001098 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001060:	2b00      	cmp	r3, #0
 8001062:	d119      	bne.n	8001098 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001072:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	f043 0201 	orr.w	r2, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fa97 	bl	80015cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f06f 020c 	mvn.w	r2, #12
 80010a6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d017      	beq.n	80010ee <HAL_ADC_IRQHandler+0x1d6>
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d014      	beq.n	80010ee <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d10d      	bne.n	80010ee <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f841 	bl	8001166 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 0201 	mvn.w	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010fc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d015      	beq.n	8001130 <HAL_ADC_IRQHandler+0x218>
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d012      	beq.n	8001130 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f043 0202 	orr.w	r2, r3, #2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f06f 0220 	mvn.w	r2, #32
 800111e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f82a 	bl	800117a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f06f 0220 	mvn.w	r2, #32
 800112e:	601a      	str	r2, [r3, #0]
  }
}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1c>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e105      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x228>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d925      	bls.n	8001208 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68d9      	ldr	r1, [r3, #12]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	3b1e      	subs	r3, #30
 80011d2:	2207      	movs	r2, #7
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43da      	mvns	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68d9      	ldr	r1, [r3, #12]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	4603      	mov	r3, r0
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4403      	add	r3, r0
 80011fa:	3b1e      	subs	r3, #30
 80011fc:	409a      	lsls	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	e022      	b.n	800124e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6919      	ldr	r1, [r3, #16]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	2207      	movs	r2, #7
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	400a      	ands	r2, r1
 800122a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6919      	ldr	r1, [r3, #16]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	4603      	mov	r3, r0
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4403      	add	r3, r0
 8001244:	409a      	lsls	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d824      	bhi.n	80012a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	3b05      	subs	r3, #5
 8001268:	221f      	movs	r2, #31
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	400a      	ands	r2, r1
 8001276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	3b05      	subs	r3, #5
 8001292:	fa00 f203 	lsl.w	r2, r0, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	@ 0x34
 800129e:	e04c      	b.n	800133a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d824      	bhi.n	80012f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3b23      	subs	r3, #35	@ 0x23
 80012ba:	221f      	movs	r2, #31
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43da      	mvns	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	400a      	ands	r2, r1
 80012c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3b23      	subs	r3, #35	@ 0x23
 80012e4:	fa00 f203 	lsl.w	r2, r0, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80012f0:	e023      	b.n	800133a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	3b41      	subs	r3, #65	@ 0x41
 8001304:	221f      	movs	r2, #31
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	400a      	ands	r2, r1
 8001312:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	3b41      	subs	r3, #65	@ 0x41
 800132e:	fa00 f203 	lsl.w	r2, r0, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800133a:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <HAL_ADC_ConfigChannel+0x234>)
 800133c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <HAL_ADC_ConfigChannel+0x238>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d109      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1cc>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b12      	cmp	r3, #18
 800134e:	d105      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_ADC_ConfigChannel+0x238>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d123      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x21e>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b10      	cmp	r3, #16
 800136c:	d003      	beq.n	8001376 <HAL_ADC_ConfigChannel+0x1e6>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b11      	cmp	r3, #17
 8001374:	d11b      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b10      	cmp	r3, #16
 8001388:	d111      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_ADC_ConfigChannel+0x23c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a10      	ldr	r2, [pc, #64]	@ (80013d0 <HAL_ADC_ConfigChannel+0x240>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0c9a      	lsrs	r2, r3, #18
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013a0:	e002      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40012300 	.word	0x40012300
 80013c8:	40012000 	.word	0x40012000
 80013cc:	20000000 	.word	0x20000000
 80013d0:	431bde83 	.word	0x431bde83

080013d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013dc:	4b79      	ldr	r3, [pc, #484]	@ (80015c4 <ADC_Init+0x1f0>)
 80013de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	021a      	lsls	r2, r3, #8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800142c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800144e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6899      	ldr	r1, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001466:	4a58      	ldr	r2, [pc, #352]	@ (80015c8 <ADC_Init+0x1f4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d022      	beq.n	80014b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800147a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6899      	ldr	r1, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800149c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6899      	ldr	r1, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	e00f      	b.n	80014d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0202 	bic.w	r2, r2, #2
 80014e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6899      	ldr	r1, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e1b      	ldrb	r3, [r3, #24]
 80014ec:	005a      	lsls	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01b      	beq.n	8001538 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800150e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800151e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	3b01      	subs	r3, #1
 800152c:	035a      	lsls	r2, r3, #13
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	e007      	b.n	8001548 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001546:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001556:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	3b01      	subs	r3, #1
 8001564:	051a      	lsls	r2, r3, #20
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800157c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800158a:	025a      	lsls	r2, r3, #9
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	029a      	lsls	r2, r3, #10
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40012300 	.word	0x40012300
 80015c8:	0f000001 	.word	0x0f000001

080015cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	@ (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	@ (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff3e 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff8e 	bl	80016d4 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5d 	bl	8001680 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff31 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff f99c 	bl	8000b4c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e099      	b.n	8001954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001840:	e00f      	b.n	8001862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001842:	f7ff f983 	bl	8000b4c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b05      	cmp	r3, #5
 800184e:	d908      	bls.n	8001862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2220      	movs	r2, #32
 8001854:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e078      	b.n	8001954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1e8      	bne.n	8001842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4b38      	ldr	r3, [pc, #224]	@ (800195c <HAL_DMA_Init+0x158>)
 800187c:	4013      	ands	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800188e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d107      	bne.n	80018cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	4313      	orrs	r3, r2
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f023 0307 	bic.w	r3, r3, #7
 80018e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d117      	bne.n	8001926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00e      	beq.n	8001926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f9e9 	bl	8001ce0 <DMA_CheckFifoParam>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2240      	movs	r2, #64	@ 0x40
 8001918:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001922:	2301      	movs	r3, #1
 8001924:	e016      	b.n	8001954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f9a0 	bl	8001c74 <DMA_CalcBaseAndBitshift>
 8001934:	4603      	mov	r3, r0
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193c:	223f      	movs	r2, #63	@ 0x3f
 800193e:	409a      	lsls	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	f010803f 	.word	0xf010803f

08001960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800196c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba8 <HAL_DMA_IRQHandler+0x248>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a8e      	ldr	r2, [pc, #568]	@ (8001bac <HAL_DMA_IRQHandler+0x24c>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	0a9b      	lsrs	r3, r3, #10
 8001978:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198a:	2208      	movs	r2, #8
 800198c:	409a      	lsls	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01a      	beq.n	80019cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0204 	bic.w	r2, r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b8:	2208      	movs	r2, #8
 80019ba:	409a      	lsls	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	2201      	movs	r2, #1
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d012      	beq.n	8001a02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ee:	2201      	movs	r2, #1
 80019f0:	409a      	lsls	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a06:	2204      	movs	r2, #4
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d012      	beq.n	8001a38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a24:	2204      	movs	r2, #4
 8001a26:	409a      	lsls	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a30:	f043 0204 	orr.w	r2, r3, #4
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d043      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d03c      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d018      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d024      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
 8001a8e:	e01f      	b.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01b      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
 8001aa0:	e016      	b.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d107      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0208 	bic.w	r2, r2, #8
 8001abe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 808f 	beq.w	8001c00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8087 	beq.w	8001c00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af6:	2220      	movs	r2, #32
 8001af8:	409a      	lsls	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d136      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0216 	bic.w	r2, r2, #22
 8001b18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <HAL_DMA_IRQHandler+0x1da>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0208 	bic.w	r2, r2, #8
 8001b48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4e:	223f      	movs	r2, #63	@ 0x3f
 8001b50:	409a      	lsls	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d07e      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
        }
        return;
 8001b76:	e079      	b.n	8001c6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01d      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10d      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d031      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
 8001ba4:	e02c      	b.n	8001c00 <HAL_DMA_IRQHandler+0x2a0>
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d023      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
 8001bc0:	e01e      	b.n	8001c00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10f      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0210 	bic.w	r2, r2, #16
 8001bde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d032      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d022      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2205      	movs	r2, #5
 8001c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d307      	bcc.n	8001c48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f2      	bne.n	8001c2c <HAL_DMA_IRQHandler+0x2cc>
 8001c46:	e000      	b.n	8001c4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c6c:	bf00      	nop
    }
  }
}
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3b10      	subs	r3, #16
 8001c84:	4a14      	ldr	r2, [pc, #80]	@ (8001cd8 <DMA_CalcBaseAndBitshift+0x64>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c8e:	4a13      	ldr	r2, [pc, #76]	@ (8001cdc <DMA_CalcBaseAndBitshift+0x68>)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d909      	bls.n	8001cb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	1d1a      	adds	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cb4:	e007      	b.n	8001cc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	aaaaaaab 	.word	0xaaaaaaab
 8001cdc:	08007f14 	.word	0x08007f14

08001ce0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d11f      	bne.n	8001d3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d856      	bhi.n	8001dae <DMA_CheckFifoParam+0xce>
 8001d00:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <DMA_CheckFifoParam+0x28>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d19 	.word	0x08001d19
 8001d0c:	08001d2b 	.word	0x08001d2b
 8001d10:	08001d19 	.word	0x08001d19
 8001d14:	08001daf 	.word	0x08001daf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d046      	beq.n	8001db2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d28:	e043      	b.n	8001db2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d32:	d140      	bne.n	8001db6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d38:	e03d      	b.n	8001db6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d42:	d121      	bne.n	8001d88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d837      	bhi.n	8001dba <DMA_CheckFifoParam+0xda>
 8001d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d50 <DMA_CheckFifoParam+0x70>)
 8001d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d50:	08001d61 	.word	0x08001d61
 8001d54:	08001d67 	.word	0x08001d67
 8001d58:	08001d61 	.word	0x08001d61
 8001d5c:	08001d79 	.word	0x08001d79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
      break;
 8001d64:	e030      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d025      	beq.n	8001dbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d76:	e022      	b.n	8001dbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d80:	d11f      	bne.n	8001dc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d86:	e01c      	b.n	8001dc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d903      	bls.n	8001d96 <DMA_CheckFifoParam+0xb6>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d003      	beq.n	8001d9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d94:	e018      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9a:	e015      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00e      	beq.n	8001dc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
      break;
 8001dac:	e00b      	b.n	8001dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001dae:	bf00      	nop
 8001db0:	e00a      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001db2:	bf00      	nop
 8001db4:	e008      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
 8001db8:	e006      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e004      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e002      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dc2:	bf00      	nop
 8001dc4:	e000      	b.n	8001dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc6:	bf00      	nop
    }
  } 
  
  return status; 
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e159      	b.n	80020a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 8148 	bne.w	80020a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d005      	beq.n	8001e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d130      	bne.n	8001e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0201 	and.w	r2, r3, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d017      	beq.n	8001ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d123      	bne.n	8001f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	69b9      	ldr	r1, [r7, #24]
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a2 	beq.w	80020a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b57      	ldr	r3, [pc, #348]	@ (80020c0 <HAL_GPIO_Init+0x2e8>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	4a56      	ldr	r2, [pc, #344]	@ (80020c0 <HAL_GPIO_Init+0x2e8>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6e:	4b54      	ldr	r3, [pc, #336]	@ (80020c0 <HAL_GPIO_Init+0x2e8>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f7a:	4a52      	ldr	r2, [pc, #328]	@ (80020c4 <HAL_GPIO_Init+0x2ec>)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a49      	ldr	r2, [pc, #292]	@ (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d019      	beq.n	8001fda <HAL_GPIO_Init+0x202>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a48      	ldr	r2, [pc, #288]	@ (80020cc <HAL_GPIO_Init+0x2f4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_GPIO_Init+0x1fe>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a47      	ldr	r2, [pc, #284]	@ (80020d0 <HAL_GPIO_Init+0x2f8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_GPIO_Init+0x1fa>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a46      	ldr	r2, [pc, #280]	@ (80020d4 <HAL_GPIO_Init+0x2fc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x1f6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a45      	ldr	r2, [pc, #276]	@ (80020d8 <HAL_GPIO_Init+0x300>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_GPIO_Init+0x1f2>
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	e008      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e004      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	f002 0203 	and.w	r2, r2, #3
 8001fe2:	0092      	lsls	r2, r2, #2
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fec:	4935      	ldr	r1, [pc, #212]	@ (80020c4 <HAL_GPIO_Init+0x2ec>)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffa:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <HAL_GPIO_Init+0x304>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201e:	4a2f      	ldr	r2, [pc, #188]	@ (80020dc <HAL_GPIO_Init+0x304>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002024:	4b2d      	ldr	r3, [pc, #180]	@ (80020dc <HAL_GPIO_Init+0x304>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002048:	4a24      	ldr	r2, [pc, #144]	@ (80020dc <HAL_GPIO_Init+0x304>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800204e:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <HAL_GPIO_Init+0x304>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002072:	4a1a      	ldr	r2, [pc, #104]	@ (80020dc <HAL_GPIO_Init+0x304>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002078:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <HAL_GPIO_Init+0x304>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209c:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <HAL_GPIO_Init+0x304>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b0f      	cmp	r3, #15
 80020ac:	f67f aea2 	bls.w	8001df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3724      	adds	r7, #36	@ 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40013800 	.word	0x40013800
 80020c8:	40020000 	.word	0x40020000
 80020cc:	40020400 	.word	0x40020400
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40013c00 	.word	0x40013c00

080020e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e101      	b.n	80022f6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d106      	bne.n	8002112 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f005 fb89 	bl	8007824 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2203      	movs	r2, #3
 8002116:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002120:	d102      	bne.n	8002128 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f001 ff70 	bl	8004012 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7c1a      	ldrb	r2, [r3, #16]
 800213a:	f88d 2000 	strb.w	r2, [sp]
 800213e:	3304      	adds	r3, #4
 8002140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002142:	f001 fe4f 	bl	8003de4 <USB_CoreInit>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0ce      	b.n	80022f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f001 ff68 	bl	8004034 <USB_SetCurrentMode>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0bf      	b.n	80022f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	e04a      	b.n	8002212 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3315      	adds	r3, #21
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3314      	adds	r3, #20
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	b298      	uxth	r0, r3
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	332e      	adds	r3, #46	@ 0x2e
 80021b8:	4602      	mov	r2, r0
 80021ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3318      	adds	r3, #24
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	331c      	adds	r3, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3320      	adds	r3, #32
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3324      	adds	r3, #36	@ 0x24
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	3301      	adds	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	791b      	ldrb	r3, [r3, #4]
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3af      	bcc.n	800217c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e044      	b.n	80022ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	3301      	adds	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3b5      	bcc.n	8002222 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7c1a      	ldrb	r2, [r3, #16]
 80022be:	f88d 2000 	strb.w	r2, [sp]
 80022c2:	3304      	adds	r3, #4
 80022c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c6:	f001 ff01 	bl	80040cc <USB_DevInit>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e00c      	b.n	80022f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 ff4b 	bl	800518a <USB_DevDisconnect>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_PCD_Start+0x1c>
 8002316:	2302      	movs	r3, #2
 8002318:	e022      	b.n	8002360 <HAL_PCD_Start+0x62>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fe52 	bl	8003ff0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f002 fef9 	bl	8005148 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b08d      	sub	sp, #52	@ 0x34
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 ffb7 	bl	80052f2 <USB_GetMode>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 848c 	bne.w	8002ca4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f002 ff1b 	bl	80051cc <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8482 	beq.w	8002ca2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 ff08 	bl	80051cc <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d107      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f002 0202 	and.w	r2, r2, #2
 80023d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fef6 	bl	80051cc <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d161      	bne.n	80024ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0210 	bic.w	r2, r2, #16
 80023f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	f003 020f 	and.w	r2, r3, #15
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	0c5b      	lsrs	r3, r3, #17
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	2b02      	cmp	r3, #2
 8002424:	d124      	bne.n	8002470 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d035      	beq.n	800249e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800243c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	6a38      	ldr	r0, [r7, #32]
 8002446:	f002 fd2d 	bl	8004ea4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002456:	441a      	add	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002468:	441a      	add	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	615a      	str	r2, [r3, #20]
 800246e:	e016      	b.n	800249e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	0c5b      	lsrs	r3, r3, #17
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	2b06      	cmp	r3, #6
 800247a:	d110      	bne.n	800249e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002482:	2208      	movs	r2, #8
 8002484:	4619      	mov	r1, r3
 8002486:	6a38      	ldr	r0, [r7, #32]
 8002488:	f002 fd0c 	bl	8004ea4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002498:	441a      	add	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0210 	orr.w	r2, r2, #16
 80024ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fe8a 	bl	80051cc <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80024c2:	f040 80a7 	bne.w	8002614 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fe8f 	bl	80051f2 <USB_ReadDevAllOutEpInterrupt>
 80024d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80024d6:	e099      	b.n	800260c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 808e 	beq.w	8002600 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 feb3 	bl	800525a <USB_ReadDevOutEPInterrupt>
 80024f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00c      	beq.n	800251a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250c:	461a      	mov	r2, r3
 800250e:	2301      	movs	r3, #1
 8002510:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fea3 	bl	8003260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00c      	beq.n	800253e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002530:	461a      	mov	r2, r3
 8002532:	2308      	movs	r3, #8
 8002534:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002536:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 ff79 	bl	8003430 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002554:	461a      	mov	r2, r3
 8002556:	2310      	movs	r3, #16
 8002558:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d030      	beq.n	80025c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256c:	2b80      	cmp	r3, #128	@ 0x80
 800256e:	d109      	bne.n	8002584 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800257e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002582:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	3304      	adds	r3, #4
 8002598:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	78db      	ldrb	r3, [r3, #3]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f005 fa3e 	bl	8007a30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025c0:	461a      	mov	r2, r3
 80025c2:	2302      	movs	r3, #2
 80025c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025dc:	461a      	mov	r2, r3
 80025de:	2320      	movs	r3, #32
 80025e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025f8:	461a      	mov	r2, r3
 80025fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	f47f af62 	bne.w	80024d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fdd7 	bl	80051cc <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002624:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002628:	f040 80db 	bne.w	80027e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fdf8 	bl	8005226 <USB_ReadDevAllInEpInterrupt>
 8002636:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800263c:	e0cd      	b.n	80027da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80c2 	beq.w	80027ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fe1e 	bl	8005296 <USB_ReadDevInEPInterrupt>
 800265a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d057      	beq.n	8002716 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	2201      	movs	r2, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800267a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43db      	mvns	r3, r3
 8002680:	69f9      	ldr	r1, [r7, #28]
 8002682:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002686:	4013      	ands	r3, r2
 8002688:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002696:	461a      	mov	r2, r3
 8002698:	2301      	movs	r3, #1
 800269a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	799b      	ldrb	r3, [r3, #6]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d132      	bne.n	800270a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	3320      	adds	r3, #32
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4403      	add	r3, r0
 80026c4:	331c      	adds	r3, #28
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4419      	add	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4403      	add	r3, r0
 80026d8:	3320      	adds	r3, #32
 80026da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d113      	bne.n	800270a <HAL_PCD_IRQHandler+0x3a2>
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3324      	adds	r3, #36	@ 0x24
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d108      	bne.n	800270a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002702:	461a      	mov	r2, r3
 8002704:	2101      	movs	r1, #1
 8002706:	f002 fe25 	bl	8005354 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f005 f908 	bl	8007926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800272c:	461a      	mov	r2, r3
 800272e:	2308      	movs	r3, #8
 8002730:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002748:	461a      	mov	r2, r3
 800274a:	2310      	movs	r3, #16
 800274c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002764:	461a      	mov	r2, r3
 8002766:	2340      	movs	r3, #64	@ 0x40
 8002768:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d023      	beq.n	80027bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002774:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002776:	6a38      	ldr	r0, [r7, #32]
 8002778:	f001 fe0c 	bl	8004394 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800277c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3310      	adds	r3, #16
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	78db      	ldrb	r3, [r3, #3]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d108      	bne.n	80027aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2200      	movs	r2, #0
 800279c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	4619      	mov	r1, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f005 f955 	bl	8007a54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027b6:	461a      	mov	r2, r3
 80027b8:	2302      	movs	r3, #2
 80027ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fcbd 	bl	8003148 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	3301      	adds	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f af2e 	bne.w	800263e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fcf0 	bl	80051cc <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027f6:	d122      	bne.n	800283e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800281e:	2100      	movs	r1, #0
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fea3 	bl	800356c <HAL_PCDEx_LPM_Callback>
 8002826:	e002      	b.n	800282e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f005 f8f3 	bl	8007a14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800283c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fcc2 	bl	80051cc <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800284e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002852:	d112      	bne.n	800287a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f005 f8af 	bl	80079c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002878:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f002 fca4 	bl	80051cc <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288e:	f040 80b7 	bne.w	8002a00 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2110      	movs	r1, #16
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 fd71 	bl	8004394 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028b6:	e046      	b.n	8002946 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c4:	461a      	mov	r2, r3
 80028c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028dc:	0151      	lsls	r1, r2, #5
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	440a      	add	r2, r1
 80028e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80028e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f8:	461a      	mov	r2, r3
 80028fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002910:	0151      	lsls	r1, r2, #5
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	440a      	add	r2, r1
 8002916:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800291a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800291e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	440a      	add	r2, r1
 8002936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800293a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800293e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002942:	3301      	adds	r3, #1
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	791b      	ldrb	r3, [r3, #4]
 800294a:	461a      	mov	r2, r3
 800294c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294e:	4293      	cmp	r3, r2
 8002950:	d3b2      	bcc.n	80028b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002960:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002964:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7bdb      	ldrb	r3, [r3, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800297e:	f043 030b 	orr.w	r3, r3, #11
 8002982:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002994:	f043 030b 	orr.w	r3, r3, #11
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	e015      	b.n	80029c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80029b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029c2:	f043 030b 	orr.w	r3, r3, #11
 80029c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80029da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029ea:	461a      	mov	r2, r3
 80029ec:	f002 fcb2 	bl	8005354 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80029fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 fbe1 	bl	80051cc <USB_ReadInterrupts>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a14:	d123      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 fc77 	bl	800530e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fd2e 	bl	8004486 <USB_GetDevSpeed>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681c      	ldr	r4, [r3, #0]
 8002a36:	f001 f9c9 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8002a3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a40:	461a      	mov	r2, r3
 8002a42:	4620      	mov	r0, r4
 8002a44:	f001 fa32 	bl	8003eac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f004 ff94 	bl	8007976 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fbb2 	bl	80051cc <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d10a      	bne.n	8002a88 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f004 ff71 	bl	800795a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f002 0208 	and.w	r2, r2, #8
 8002a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 fb9d 	bl	80051cc <USB_ReadInterrupts>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a98:	2b80      	cmp	r3, #128	@ 0x80
 8002a9a:	d123      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aac:	e014      	b.n	8002ad8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb0a 	bl	80030e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	461a      	mov	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d3e4      	bcc.n	8002aae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f002 fb6f 	bl	80051cc <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002af8:	d13c      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002afa:	2301      	movs	r3, #1
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002afe:	e02b      	b.n	8002b58 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3318      	adds	r3, #24
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d115      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da12      	bge.n	8002b52 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3317      	adds	r3, #23
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 faca 	bl	80030e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	791b      	ldrb	r3, [r3, #4]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d3cd      	bcc.n	8002b00 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fb27 	bl	80051cc <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b88:	d156      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8e:	e045      	b.n	8002c1c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d12e      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	da2b      	bge.n	8002c16 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002bca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d121      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c12:	6053      	str	r3, [r2, #4]
            break;
 8002c14:	e008      	b.n	8002c28 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	3301      	adds	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	791b      	ldrb	r3, [r3, #4]
 8002c20:	461a      	mov	r2, r3
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d3b3      	bcc.n	8002b90 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fac5 	bl	80051cc <USB_ReadInterrupts>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4c:	d10a      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f004 ff12 	bl	8007a78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 faaf 	bl	80051cc <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d115      	bne.n	8002ca4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f004 ff02 	bl	8007a94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	e000      	b.n	8002ca4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ca2:	bf00      	nop
    }
  }
}
 8002ca4:	3734      	adds	r7, #52	@ 0x34
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd90      	pop	{r4, r7, pc}

08002caa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_SetAddress+0x1a>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e012      	b.n	8002cea <HAL_PCD_SetAddress+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 fa0e 	bl	80050fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4603      	mov	r3, r0
 8002d02:	70fb      	strb	r3, [r7, #3]
 8002d04:	460b      	mov	r3, r1
 8002d06:	803b      	strh	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da0f      	bge.n	8002d38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3310      	adds	r3, #16
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	705a      	strb	r2, [r3, #1]
 8002d36:	e00f      	b.n	8002d58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002d64:	883b      	ldrh	r3, [r7, #0]
 8002d66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	78ba      	ldrb	r2, [r7, #2]
 8002d72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d86:	78bb      	ldrb	r3, [r7, #2]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d102      	bne.n	8002d92 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_EP_Open+0xae>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e00e      	b.n	8002dbe <HAL_PCD_EP_Open+0xcc>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 fb8e 	bl	80044d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da0f      	bge.n	8002dfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3310      	adds	r3, #16
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	705a      	strb	r2, [r3, #1]
 8002df8:	e00f      	b.n	8002e1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_EP_Close+0x6e>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e00e      	b.n	8002e52 <HAL_PCD_EP_Close+0x8c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fbcc 	bl	80045e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	460b      	mov	r3, r1
 8002e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	799b      	ldrb	r3, [r3, #6]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	799b      	ldrb	r3, [r3, #6]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	f001 fc69 	bl	8004798 <USB_EPStartXfer>

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	3310      	adds	r3, #16
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	799b      	ldrb	r3, [r3, #6]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	799b      	ldrb	r3, [r3, #6]
 8002f62:	461a      	mov	r2, r3
 8002f64:	6979      	ldr	r1, [r7, #20]
 8002f66:	f001 fc17 	bl	8004798 <USB_EPStartXfer>

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	7912      	ldrb	r2, [r2, #4]
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e04f      	b.n	8003032 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	da0f      	bge.n	8002fba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	f003 020f 	and.w	r2, r3, #15
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	3310      	adds	r3, #16
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	3304      	adds	r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	705a      	strb	r2, [r3, #1]
 8002fb8:	e00d      	b.n	8002fd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_PCD_EP_SetStall+0x82>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e01d      	b.n	8003032 <HAL_PCD_EP_SetStall+0xbe>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68f9      	ldr	r1, [r7, #12]
 8003004:	4618      	mov	r0, r3
 8003006:	f001 ffa5 	bl	8004f54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7999      	ldrb	r1, [r3, #6]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003022:	461a      	mov	r2, r3
 8003024:	f002 f996 	bl	8005354 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	7912      	ldrb	r2, [r2, #4]
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e042      	b.n	80030de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800305c:	2b00      	cmp	r3, #0
 800305e:	da0f      	bge.n	8003080 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	f003 020f 	and.w	r2, r3, #15
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	3310      	adds	r3, #16
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	3304      	adds	r3, #4
 8003076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	705a      	strb	r2, [r3, #1]
 800307e:	e00f      	b.n	80030a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	3304      	adds	r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_PCD_EP_ClrStall+0x86>
 80030bc:	2302      	movs	r3, #2
 80030be:	e00e      	b.n	80030de <HAL_PCD_EP_ClrStall+0xa4>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68f9      	ldr	r1, [r7, #12]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 ffae 	bl	8005030 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	da0c      	bge.n	8003114 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	3310      	adds	r3, #16
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	3304      	adds	r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e00c      	b.n	800312e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68f9      	ldr	r1, [r7, #12]
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fdcd 	bl	8004cd4 <USB_EPStopXfer>
 800313a:	4603      	mov	r3, r0
 800313c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800313e:	7afb      	ldrb	r3, [r7, #11]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	@ 0x28
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3310      	adds	r3, #16
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	429a      	cmp	r2, r3
 800317a:	d901      	bls.n	8003180 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e06b      	b.n	8003258 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	429a      	cmp	r2, r3
 8003194:	d902      	bls.n	800319c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	3303      	adds	r3, #3
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031a4:	e02a      	b.n	80031fc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d902      	bls.n	80031c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3303      	adds	r3, #3
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68d9      	ldr	r1, [r3, #12]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4603      	mov	r3, r0
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f001 fe22 	bl	8004e28 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	441a      	add	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	441a      	add	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	429a      	cmp	r2, r3
 8003210:	d809      	bhi.n	8003226 <PCD_WriteEmptyTxFifo+0xde>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800321a:	429a      	cmp	r2, r3
 800321c:	d203      	bcs.n	8003226 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1bf      	bne.n	80031a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	429a      	cmp	r2, r3
 8003230:	d811      	bhi.n	8003256 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	2201      	movs	r2, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	43db      	mvns	r3, r3
 800324c:	6939      	ldr	r1, [r7, #16]
 800324e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003252:	4013      	ands	r3, r2
 8003254:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	333c      	adds	r3, #60	@ 0x3c
 8003278:	3304      	adds	r3, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	799b      	ldrb	r3, [r3, #6]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d17b      	bne.n	800338e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d015      	beq.n	80032cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	4a61      	ldr	r2, [pc, #388]	@ (8003428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	f240 80b9 	bls.w	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80b3 	beq.w	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c8:	6093      	str	r3, [r2, #8]
 80032ca:	e0a7      	b.n	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e2:	461a      	mov	r2, r3
 80032e4:	2320      	movs	r3, #32
 80032e6:	6093      	str	r3, [r2, #8]
 80032e8:	e098      	b.n	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f040 8093 	bne.w	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d90f      	bls.n	800331e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800331a:	6093      	str	r3, [r2, #8]
 800331c:	e07e      	b.n	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	3304      	adds	r3, #4
 8003332:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1a      	ldr	r2, [r3, #32]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	440b      	add	r3, r1
 8003340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d114      	bne.n	8003380 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003368:	461a      	mov	r2, r3
 800336a:	2101      	movs	r1, #1
 800336c:	f001 fff2 	bl	8005354 <USB_EP0_OutStart>
 8003370:	e006      	b.n	8003380 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	441a      	add	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f004 fab2 	bl	80078f0 <HAL_PCD_DataOutStageCallback>
 800338c:	e046      	b.n	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	4a26      	ldr	r2, [pc, #152]	@ (800342c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d124      	bne.n	80033e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ac:	461a      	mov	r2, r3
 80033ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b2:	6093      	str	r3, [r2, #8]
 80033b4:	e032      	b.n	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	2320      	movs	r3, #32
 80033d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f004 fa89 	bl	80078f0 <HAL_PCD_DataOutStageCallback>
 80033de:	e01d      	b.n	800341c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d114      	bne.n	8003410 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003408:	461a      	mov	r2, r3
 800340a:	2100      	movs	r1, #0
 800340c:	f001 ffa2 	bl	8005354 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f004 fa6a 	bl	80078f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	4f54300a 	.word	0x4f54300a
 800342c:	4f54310a 	.word	0x4f54310a

08003430 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	333c      	adds	r3, #60	@ 0x3c
 8003448:	3304      	adds	r3, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a15      	ldr	r2, [pc, #84]	@ (80034b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d90e      	bls.n	8003484 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800347c:	461a      	mov	r2, r3
 800347e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003482:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f004 fa21 	bl	80078cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d90c      	bls.n	80034ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	799b      	ldrb	r3, [r3, #6]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d108      	bne.n	80034ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034a4:	461a      	mov	r2, r3
 80034a6:	2101      	movs	r1, #1
 80034a8:	f001 ff54 	bl	8005354 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	4f54300a 	.word	0x4f54300a

080034bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
 80034c8:	4613      	mov	r3, r2
 80034ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034da:	883b      	ldrh	r3, [r7, #0]
 80034dc:	0419      	lsls	r1, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80034e8:	e028      	b.n	800353c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4413      	add	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e00d      	b.n	800351a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	3340      	adds	r3, #64	@ 0x40
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4413      	add	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	3301      	adds	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	3b01      	subs	r3, #1
 8003520:	429a      	cmp	r2, r3
 8003522:	d3ec      	bcc.n	80034fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003524:	883b      	ldrh	r3, [r7, #0]
 8003526:	0418      	lsls	r0, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6819      	ldr	r1, [r3, #0]
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	3b01      	subs	r3, #1
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	4302      	orrs	r2, r0
 8003534:	3340      	adds	r3, #64	@ 0x40
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e267      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d075      	beq.n	800368e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035a2:	4b88      	ldr	r3, [pc, #544]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4b85      	ldr	r3, [pc, #532]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b82      	ldr	r3, [pc, #520]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4b7e      	ldr	r3, [pc, #504]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x108>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d157      	bne.n	800368c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e242      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x74>
 80035ea:	4b76      	ldr	r3, [pc, #472]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a75      	ldr	r2, [pc, #468]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x98>
 8003602:	4b70      	ldr	r3, [pc, #448]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6f      	ldr	r2, [pc, #444]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b6d      	ldr	r3, [pc, #436]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6c      	ldr	r2, [pc, #432]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 800361c:	4b69      	ldr	r3, [pc, #420]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a68      	ldr	r2, [pc, #416]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b66      	ldr	r3, [pc, #408]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a65      	ldr	r2, [pc, #404]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd fa86 	bl	8000b4c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fd fa82 	bl	8000b4c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e207      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b5b      	ldr	r3, [pc, #364]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xc0>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fd fa72 	bl	8000b4c <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fd fa6e 	bl	8000b4c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1f3      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b51      	ldr	r3, [pc, #324]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0xe8>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800369a:	4b4a      	ldr	r3, [pc, #296]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a6:	4b47      	ldr	r3, [pc, #284]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b44      	ldr	r3, [pc, #272]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b41      	ldr	r3, [pc, #260]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1c7      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b3b      	ldr	r3, [pc, #236]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4937      	ldr	r1, [pc, #220]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b34      	ldr	r3, [pc, #208]	@ (80037c8 <HAL_RCC_OscConfig+0x244>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fa27 	bl	8000b4c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd fa23 	bl	8000b4c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1a8      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b2b      	ldr	r3, [pc, #172]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b28      	ldr	r3, [pc, #160]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4925      	ldr	r1, [pc, #148]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <HAL_RCC_OscConfig+0x244>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd fa06 	bl	8000b4c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003744:	f7fd fa02 	bl	8000b4c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e187      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b1b      	ldr	r3, [pc, #108]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d036      	beq.n	80037dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <HAL_RCC_OscConfig+0x248>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd f9e6 	bl	8000b4c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003784:	f7fd f9e2 	bl	8000b4c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e167      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <HAL_RCC_OscConfig+0x240>)
 8003798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x200>
 80037a2:	e01b      	b.n	80037dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a4:	4b09      	ldr	r3, [pc, #36]	@ (80037cc <HAL_RCC_OscConfig+0x248>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037aa:	f7fd f9cf 	bl	8000b4c <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	e00e      	b.n	80037d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b2:	f7fd f9cb 	bl	8000b4c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d907      	bls.n	80037d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e150      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	42470000 	.word	0x42470000
 80037cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	4b88      	ldr	r3, [pc, #544]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ea      	bne.n	80037b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8097 	beq.w	8003918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ee:	4b81      	ldr	r3, [pc, #516]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10f      	bne.n	800381a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	4b7d      	ldr	r3, [pc, #500]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	4a7c      	ldr	r2, [pc, #496]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003808:	6413      	str	r3, [r2, #64]	@ 0x40
 800380a:	4b7a      	ldr	r3, [pc, #488]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003816:	2301      	movs	r3, #1
 8003818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381a:	4b77      	ldr	r3, [pc, #476]	@ (80039f8 <HAL_RCC_OscConfig+0x474>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003826:	4b74      	ldr	r3, [pc, #464]	@ (80039f8 <HAL_RCC_OscConfig+0x474>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a73      	ldr	r2, [pc, #460]	@ (80039f8 <HAL_RCC_OscConfig+0x474>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fd f98b 	bl	8000b4c <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fd f987 	bl	8000b4c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e10c      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <HAL_RCC_OscConfig+0x474>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d106      	bne.n	800386e <HAL_RCC_OscConfig+0x2ea>
 8003860:	4b64      	ldr	r3, [pc, #400]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003864:	4a63      	ldr	r2, [pc, #396]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	@ 0x70
 800386c:	e01c      	b.n	80038a8 <HAL_RCC_OscConfig+0x324>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b05      	cmp	r3, #5
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x30c>
 8003876:	4b5f      	ldr	r3, [pc, #380]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387a:	4a5e      	ldr	r2, [pc, #376]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 800387c:	f043 0304 	orr.w	r3, r3, #4
 8003880:	6713      	str	r3, [r2, #112]	@ 0x70
 8003882:	4b5c      	ldr	r3, [pc, #368]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003886:	4a5b      	ldr	r2, [pc, #364]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	6713      	str	r3, [r2, #112]	@ 0x70
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0x324>
 8003890:	4b58      	ldr	r3, [pc, #352]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003894:	4a57      	ldr	r2, [pc, #348]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6713      	str	r3, [r2, #112]	@ 0x70
 800389c:	4b55      	ldr	r3, [pc, #340]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a0:	4a54      	ldr	r2, [pc, #336]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 80038a2:	f023 0304 	bic.w	r3, r3, #4
 80038a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d015      	beq.n	80038dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd f94c 	bl	8000b4c <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fd f948 	bl	8000b4c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0cb      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	4b49      	ldr	r3, [pc, #292]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0ee      	beq.n	80038b8 <HAL_RCC_OscConfig+0x334>
 80038da:	e014      	b.n	8003906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038dc:	f7fd f936 	bl	8000b4c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fd f932 	bl	8000b4c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0b5      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fa:	4b3e      	ldr	r3, [pc, #248]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ee      	bne.n	80038e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390c:	4b39      	ldr	r3, [pc, #228]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	4a38      	ldr	r2, [pc, #224]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003916:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80a1 	beq.w	8003a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003922:	4b34      	ldr	r3, [pc, #208]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b08      	cmp	r3, #8
 800392c:	d05c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d141      	bne.n	80039ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	4b31      	ldr	r3, [pc, #196]	@ (80039fc <HAL_RCC_OscConfig+0x478>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fd f906 	bl	8000b4c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd f902 	bl	8000b4c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e087      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b27      	ldr	r3, [pc, #156]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	491b      	ldr	r1, [pc, #108]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x478>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fd f8db 	bl	8000b4c <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399a:	f7fd f8d7 	bl	8000b4c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e05c      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ac:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x416>
 80039b8:	e054      	b.n	8003a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_RCC_OscConfig+0x478>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd f8c4 	bl	8000b4c <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd f8c0 	bl	8000b4c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e045      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <HAL_RCC_OscConfig+0x470>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x444>
 80039e6:	e03d      	b.n	8003a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e038      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <HAL_RCC_OscConfig+0x4ec>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d028      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d121      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d11a      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d111      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0cc      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b68      	ldr	r3, [pc, #416]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d90c      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b65      	ldr	r3, [pc, #404]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b63      	ldr	r3, [pc, #396]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0b8      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac8:	4b59      	ldr	r3, [pc, #356]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a58      	ldr	r2, [pc, #352]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae0:	4b53      	ldr	r3, [pc, #332]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a52      	ldr	r2, [pc, #328]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b50      	ldr	r3, [pc, #320]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	494d      	ldr	r1, [pc, #308]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d044      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4b47      	ldr	r3, [pc, #284]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d119      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e07f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b3f      	ldr	r3, [pc, #252]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3b      	ldr	r3, [pc, #236]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e067      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b37      	ldr	r3, [pc, #220]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4934      	ldr	r1, [pc, #208]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b64:	f7fc fff2 	bl	8000b4c <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fc ffee 	bl	8000b4c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e04f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2b      	ldr	r3, [pc, #172]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d20c      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e032      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc8:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4916      	ldr	r1, [pc, #88]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be6:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	490e      	ldr	r1, [pc, #56]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bfa:	f000 f821 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	490a      	ldr	r1, [pc, #40]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	5ccb      	ldrb	r3, [r1, r3]
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	4a09      	ldr	r2, [pc, #36]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c16:	4b09      	ldr	r3, [pc, #36]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc ff52 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023c00 	.word	0x40023c00
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08007f04 	.word	0x08007f04
 8003c38:	20000000 	.word	0x20000000
 8003c3c:	20000004 	.word	0x20000004

08003c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c44:	b090      	sub	sp, #64	@ 0x40
 8003c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c58:	4b59      	ldr	r3, [pc, #356]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d00d      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x40>
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	f200 80a1 	bhi.w	8003dac <HAL_RCC_GetSysClockFreq+0x16c>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c72:	e09b      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b53      	ldr	r3, [pc, #332]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c78:	e09b      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7a:	4b53      	ldr	r3, [pc, #332]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c7e:	e098      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c80:	4b4f      	ldr	r3, [pc, #316]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c96:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cac:	fb03 f201 	mul.w	r2, r3, r1
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	fb00 f303 	mul.w	r3, r0, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	4a43      	ldr	r2, [pc, #268]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cba:	fba0 1202 	umull	r1, r2, r0, r2
 8003cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cc0:	460a      	mov	r2, r1
 8003cc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cc6:	4413      	add	r3, r2
 8003cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ccc:	2200      	movs	r2, #0
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	61fa      	str	r2, [r7, #28]
 8003cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cda:	f7fc fa7b 	bl	80001d4 <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ce6:	e053      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce8:	4b35      	ldr	r3, [pc, #212]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	099b      	lsrs	r3, r3, #6
 8003cee:	2200      	movs	r2, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	617a      	str	r2, [r7, #20]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cfa:	f04f 0b00 	mov.w	fp, #0
 8003cfe:	4652      	mov	r2, sl
 8003d00:	465b      	mov	r3, fp
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f04f 0100 	mov.w	r1, #0
 8003d0a:	0159      	lsls	r1, r3, #5
 8003d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d10:	0150      	lsls	r0, r2, #5
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	ebb2 080a 	subs.w	r8, r2, sl
 8003d1a:	eb63 090b 	sbc.w	r9, r3, fp
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d32:	ebb2 0408 	subs.w	r4, r2, r8
 8003d36:	eb63 0509 	sbc.w	r5, r3, r9
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	00eb      	lsls	r3, r5, #3
 8003d44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d48:	00e2      	lsls	r2, r4, #3
 8003d4a:	4614      	mov	r4, r2
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	eb14 030a 	adds.w	r3, r4, sl
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	eb45 030b 	adc.w	r3, r5, fp
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d66:	4629      	mov	r1, r5
 8003d68:	028b      	lsls	r3, r1, #10
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d70:	4621      	mov	r1, r4
 8003d72:	028a      	lsls	r2, r1, #10
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	60fa      	str	r2, [r7, #12]
 8003d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d84:	f7fc fa26 	bl	80001d4 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d90:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003da0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003daa:	e002      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3740      	adds	r7, #64	@ 0x40
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	00f42400 	.word	0x00f42400
 8003dc8:	017d7840 	.word	0x017d7840

08003dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	@ (8003de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000000 	.word	0x20000000

08003de4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003de4:	b084      	sub	sp, #16
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	f107 001c 	add.w	r0, r7, #28
 8003df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003df6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d123      	bne.n	8003e46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d105      	bne.n	8003e3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f001 fae8 	bl	8005410 <USB_CoreReset>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e01b      	b.n	8003e7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f001 fadc 	bl	8005410 <USB_CoreReset>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e70:	e005      	b.n	8003e7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e7e:	7fbb      	ldrb	r3, [r7, #30]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d10b      	bne.n	8003e9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f043 0206 	orr.w	r2, r3, #6
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ea8:	b004      	add	sp, #16
 8003eaa:	4770      	bx	lr

08003eac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d165      	bne.n	8003f8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4a41      	ldr	r2, [pc, #260]	@ (8003fc8 <USB_SetTurnaroundTime+0x11c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d906      	bls.n	8003ed6 <USB_SetTurnaroundTime+0x2a>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4a40      	ldr	r2, [pc, #256]	@ (8003fcc <USB_SetTurnaroundTime+0x120>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d202      	bcs.n	8003ed6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ed0:	230f      	movs	r3, #15
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	e062      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fcc <USB_SetTurnaroundTime+0x120>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d306      	bcc.n	8003eec <USB_SetTurnaroundTime+0x40>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd0 <USB_SetTurnaroundTime+0x124>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d202      	bcs.n	8003eec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ee6:	230e      	movs	r3, #14
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e057      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4a38      	ldr	r2, [pc, #224]	@ (8003fd0 <USB_SetTurnaroundTime+0x124>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d306      	bcc.n	8003f02 <USB_SetTurnaroundTime+0x56>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4a37      	ldr	r2, [pc, #220]	@ (8003fd4 <USB_SetTurnaroundTime+0x128>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d202      	bcs.n	8003f02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003efc:	230d      	movs	r3, #13
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e04c      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4a33      	ldr	r2, [pc, #204]	@ (8003fd4 <USB_SetTurnaroundTime+0x128>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d306      	bcc.n	8003f18 <USB_SetTurnaroundTime+0x6c>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4a32      	ldr	r2, [pc, #200]	@ (8003fd8 <USB_SetTurnaroundTime+0x12c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d802      	bhi.n	8003f18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f12:	230c      	movs	r3, #12
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e041      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003fd8 <USB_SetTurnaroundTime+0x12c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d906      	bls.n	8003f2e <USB_SetTurnaroundTime+0x82>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4a2e      	ldr	r2, [pc, #184]	@ (8003fdc <USB_SetTurnaroundTime+0x130>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d802      	bhi.n	8003f2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f28:	230b      	movs	r3, #11
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e036      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4a2a      	ldr	r2, [pc, #168]	@ (8003fdc <USB_SetTurnaroundTime+0x130>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d906      	bls.n	8003f44 <USB_SetTurnaroundTime+0x98>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4a29      	ldr	r2, [pc, #164]	@ (8003fe0 <USB_SetTurnaroundTime+0x134>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d802      	bhi.n	8003f44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f3e:	230a      	movs	r3, #10
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e02b      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4a26      	ldr	r2, [pc, #152]	@ (8003fe0 <USB_SetTurnaroundTime+0x134>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d906      	bls.n	8003f5a <USB_SetTurnaroundTime+0xae>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4a25      	ldr	r2, [pc, #148]	@ (8003fe4 <USB_SetTurnaroundTime+0x138>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d202      	bcs.n	8003f5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f54:	2309      	movs	r3, #9
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e020      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4a21      	ldr	r2, [pc, #132]	@ (8003fe4 <USB_SetTurnaroundTime+0x138>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d306      	bcc.n	8003f70 <USB_SetTurnaroundTime+0xc4>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4a20      	ldr	r2, [pc, #128]	@ (8003fe8 <USB_SetTurnaroundTime+0x13c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d802      	bhi.n	8003f70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	e015      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe8 <USB_SetTurnaroundTime+0x13c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d906      	bls.n	8003f86 <USB_SetTurnaroundTime+0xda>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fec <USB_SetTurnaroundTime+0x140>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d202      	bcs.n	8003f86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f80:	2307      	movs	r3, #7
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e00a      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f86:	2306      	movs	r3, #6
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e007      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f92:	2309      	movs	r3, #9
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e001      	b.n	8003f9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f98:	2309      	movs	r3, #9
 8003f9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	029b      	lsls	r3, r3, #10
 8003fb0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	00d8acbf 	.word	0x00d8acbf
 8003fcc:	00e4e1c0 	.word	0x00e4e1c0
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	01067380 	.word	0x01067380
 8003fd8:	011a499f 	.word	0x011a499f
 8003fdc:	01312cff 	.word	0x01312cff
 8003fe0:	014ca43f 	.word	0x014ca43f
 8003fe4:	016e3600 	.word	0x016e3600
 8003fe8:	01a6ab1f 	.word	0x01a6ab1f
 8003fec:	01e84800 	.word	0x01e84800

08003ff0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d115      	bne.n	8004082 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004062:	200a      	movs	r0, #10
 8004064:	f7fc fd7e 	bl	8000b64 <HAL_Delay>
      ms += 10U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	330a      	adds	r3, #10
 800406c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f001 f93f 	bl	80052f2 <USB_GetMode>
 8004074:	4603      	mov	r3, r0
 8004076:	2b01      	cmp	r3, #1
 8004078:	d01e      	beq.n	80040b8 <USB_SetCurrentMode+0x84>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2bc7      	cmp	r3, #199	@ 0xc7
 800407e:	d9f0      	bls.n	8004062 <USB_SetCurrentMode+0x2e>
 8004080:	e01a      	b.n	80040b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d115      	bne.n	80040b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004094:	200a      	movs	r0, #10
 8004096:	f7fc fd65 	bl	8000b64 <HAL_Delay>
      ms += 10U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	330a      	adds	r3, #10
 800409e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f001 f926 	bl	80052f2 <USB_GetMode>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <USB_SetCurrentMode+0x84>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80040b0:	d9f0      	bls.n	8004094 <USB_SetCurrentMode+0x60>
 80040b2:	e001      	b.n	80040b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e005      	b.n	80040c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80040bc:	d101      	bne.n	80040c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040cc:	b084      	sub	sp, #16
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80040da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e009      	b.n	8004100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	3340      	adds	r3, #64	@ 0x40
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3301      	adds	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b0e      	cmp	r3, #14
 8004104:	d9f2      	bls.n	80040ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004106:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11c      	bne.n	8004148 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411c:	f043 0302 	orr.w	r3, r3, #2
 8004120:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004126:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	639a      	str	r2, [r3, #56]	@ 0x38
 8004146:	e00b      	b.n	8004160 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004166:	461a      	mov	r2, r3
 8004168:	2300      	movs	r3, #0
 800416a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800416c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10d      	bne.n	8004190 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800417c:	2100      	movs	r1, #0
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f968 	bl	8004454 <USB_SetDevSpeed>
 8004184:	e008      	b.n	8004198 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004186:	2101      	movs	r1, #1
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f963 	bl	8004454 <USB_SetDevSpeed>
 800418e:	e003      	b.n	8004198 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004190:	2103      	movs	r1, #3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f95e 	bl	8004454 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004198:	2110      	movs	r1, #16
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8fa 	bl	8004394 <USB_FlushTxFifo>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f924 	bl	80043f8 <USB_FlushRxFifo>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c0:	461a      	mov	r2, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041cc:	461a      	mov	r2, r3
 80041ce:	2300      	movs	r3, #0
 80041d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d8:	461a      	mov	r2, r3
 80041da:	2300      	movs	r3, #0
 80041dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	e043      	b.n	800426c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041fa:	d118      	bne.n	800422e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800420e:	461a      	mov	r2, r3
 8004210:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	e013      	b.n	8004240 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004224:	461a      	mov	r2, r3
 8004226:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e008      	b.n	8004240 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423a:	461a      	mov	r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800424c:	461a      	mov	r2, r3
 800424e:	2300      	movs	r3, #0
 8004250:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800425e:	461a      	mov	r2, r3
 8004260:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004264:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3301      	adds	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004270:	461a      	mov	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4293      	cmp	r3, r2
 8004276:	d3b5      	bcc.n	80041e4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	e043      	b.n	8004306 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004294:	d118      	bne.n	80042c8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e013      	b.n	80042da <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042be:	461a      	mov	r2, r3
 80042c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e008      	b.n	80042da <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d4:	461a      	mov	r2, r3
 80042d6:	2300      	movs	r3, #0
 80042d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e6:	461a      	mov	r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f8:	461a      	mov	r2, r3
 80042fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	3301      	adds	r3, #1
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800430a:	461a      	mov	r2, r3
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4293      	cmp	r3, r2
 8004310:	d3b5      	bcc.n	800427e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004324:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004332:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004334:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004338:	2b00      	cmp	r3, #0
 800433a:	d105      	bne.n	8004348 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f043 0210 	orr.w	r2, r3, #16
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <USB_DevInit+0x2c4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004354:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f043 0208 	orr.w	r2, r3, #8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004368:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800436c:	2b01      	cmp	r3, #1
 800436e:	d107      	bne.n	8004380 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800438c:	b004      	add	sp, #16
 800438e:	4770      	bx	lr
 8004390:	803c3800 	.word	0x803c3800

08004394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043ae:	d901      	bls.n	80043b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e01b      	b.n	80043ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	daf2      	bge.n	80043a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	019b      	lsls	r3, r3, #6
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043d8:	d901      	bls.n	80043de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e006      	b.n	80043ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d0f0      	beq.n	80043cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004410:	d901      	bls.n	8004416 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e018      	b.n	8004448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	daf2      	bge.n	8004404 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2210      	movs	r2, #16
 8004426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3301      	adds	r3, #1
 800442c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004434:	d901      	bls.n	800443a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e006      	b.n	8004448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b10      	cmp	r3, #16
 8004444:	d0f0      	beq.n	8004428 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	68f9      	ldr	r1, [r7, #12]
 8004470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004486:	b480      	push	{r7}
 8004488:	b087      	sub	sp, #28
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0306 	and.w	r3, r3, #6
 800449e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
 80044aa:	e00a      	b.n	80044c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d002      	beq.n	80044b8 <USB_GetDevSpeed+0x32>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	d102      	bne.n	80044be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044b8:	2302      	movs	r3, #2
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	e001      	b.n	80044c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044be:	230f      	movs	r3, #15
 80044c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d13a      	bne.n	8004562 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	2101      	movs	r1, #1
 80044fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	68f9      	ldr	r1, [r7, #12]
 8004506:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800450a:	4313      	orrs	r3, r2
 800450c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d155      	bne.n	80045d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	791b      	ldrb	r3, [r3, #4]
 800453e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004540:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	059b      	lsls	r3, r3, #22
 8004546:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004548:	4313      	orrs	r3, r2
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	0151      	lsls	r1, r2, #5
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	440a      	add	r2, r1
 8004552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e036      	b.n	80045d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004580:	4313      	orrs	r3, r2
 8004582:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11a      	bne.n	80045d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	791b      	ldrb	r3, [r3, #4]
 80045b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045b6:	430b      	orrs	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d161      	bne.n	80046c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800460e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004612:	d11f      	bne.n	8004654 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	0151      	lsls	r1, r2, #5
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	440a      	add	r2, r1
 800462a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800462e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004632:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800464e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004652:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f303 	lsl.w	r3, r1, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004674:	4013      	ands	r3, r2
 8004676:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	b29b      	uxth	r3, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004698:	4013      	ands	r3, r2
 800469a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	0159      	lsls	r1, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	440b      	add	r3, r1
 80046b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b6:	4619      	mov	r1, r3
 80046b8:	4b35      	ldr	r3, [pc, #212]	@ (8004790 <USB_DeactivateEndpoint+0x1b0>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
 80046be:	e060      	b.n	8004782 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046d6:	d11f      	bne.n	8004718 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004712:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800471e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	2101      	movs	r1, #1
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	43db      	mvns	r3, r3
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004738:	4013      	ands	r3, r2
 800473a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	43db      	mvns	r3, r3
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800475c:	4013      	ands	r3, r2
 800475e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	0159      	lsls	r1, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	440b      	add	r3, r1
 8004776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477a:	4619      	mov	r1, r3
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <USB_DeactivateEndpoint+0x1b4>)
 800477e:	4013      	ands	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	ec337800 	.word	0xec337800
 8004794:	eff37800 	.word	0xeff37800

08004798 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	@ 0x28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	785b      	ldrb	r3, [r3, #1]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	f040 817f 	bne.w	8004ab8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d132      	bne.n	8004828 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047dc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047e0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004800:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004820:	0cdb      	lsrs	r3, r3, #19
 8004822:	04db      	lsls	r3, r3, #19
 8004824:	6113      	str	r3, [r2, #16]
 8004826:	e097      	b.n	8004958 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	440a      	add	r2, r1
 800483e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004842:	0cdb      	lsrs	r3, r3, #19
 8004844:	04db      	lsls	r3, r3, #19
 8004846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	440a      	add	r2, r1
 800485e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004862:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004866:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800486a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d11a      	bne.n	80048a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	429a      	cmp	r2, r3
 800487c:	d903      	bls.n	8004886 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048a4:	6113      	str	r3, [r2, #16]
 80048a6:	e044      	b.n	8004932 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	1e5a      	subs	r2, r3, #1
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	8afb      	ldrh	r3, [r7, #22]
 80048ce:	04d9      	lsls	r1, r3, #19
 80048d0:	4ba4      	ldr	r3, [pc, #656]	@ (8004b64 <USB_EPStartXfer+0x3cc>)
 80048d2:	400b      	ands	r3, r1
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	0148      	lsls	r0, r1, #5
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	4401      	add	r1, r0
 80048dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80048e0:	4313      	orrs	r3, r2
 80048e2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	791b      	ldrb	r3, [r3, #4]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d122      	bne.n	8004932 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	440a      	add	r2, r1
 8004902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004906:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800490a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	8afb      	ldrh	r3, [r7, #22]
 800491c:	075b      	lsls	r3, r3, #29
 800491e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004922:	69b9      	ldr	r1, [r7, #24]
 8004924:	0148      	lsls	r0, r1, #5
 8004926:	69f9      	ldr	r1, [r7, #28]
 8004928:	4401      	add	r1, r0
 800492a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800492e:	4313      	orrs	r3, r2
 8004930:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	0148      	lsls	r0, r1, #5
 800494c:	69f9      	ldr	r1, [r7, #28]
 800494e:	4401      	add	r1, r0
 8004950:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004954:	4313      	orrs	r3, r2
 8004956:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d14b      	bne.n	80049f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	791b      	ldrb	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d128      	bne.n	80049d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d110      	bne.n	80049b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e00f      	b.n	80049d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e166      	b.n	8004cc4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a10:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a14:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	791b      	ldrb	r3, [r3, #4]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d015      	beq.n	8004a4a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 814e 	beq.w	8004cc4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	2101      	movs	r1, #1
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	69f9      	ldr	r1, [r7, #28]
 8004a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a44:	4313      	orrs	r3, r2
 8004a46:	634b      	str	r3, [r1, #52]	@ 0x34
 8004a48:	e13c      	b.n	8004cc4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d110      	bne.n	8004a7c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e00f      	b.n	8004a9c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a9a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	68d9      	ldr	r1, [r3, #12]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	781a      	ldrb	r2, [r3, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	b298      	uxth	r0, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4603      	mov	r3, r0
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f9b9 	bl	8004e28 <USB_WritePacket>
 8004ab6:	e105      	b.n	8004cc4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ad2:	0cdb      	lsrs	r3, r3, #19
 8004ad4:	04db      	lsls	r3, r3, #19
 8004ad6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004af6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004afa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d132      	bne.n	8004b68 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	0148      	lsls	r0, r1, #5
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	4401      	add	r1, r0
 8004b38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	0151      	lsls	r1, r2, #5
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	440a      	add	r2, r1
 8004b56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b5e:	6113      	str	r3, [r2, #16]
 8004b60:	e062      	b.n	8004c28 <USB_EPStartXfer+0x490>
 8004b62:	bf00      	nop
 8004b64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d123      	bne.n	8004bb8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b86:	69b9      	ldr	r1, [r7, #24]
 8004b88:	0148      	lsls	r0, r1, #5
 8004b8a:	69f9      	ldr	r1, [r7, #28]
 8004b8c:	4401      	add	r1, r0
 8004b8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b92:	4313      	orrs	r3, r2
 8004b94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bb4:	6113      	str	r3, [r2, #16]
 8004bb6:	e037      	b.n	8004c28 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	8afa      	ldrh	r2, [r7, #22]
 8004bd4:	fb03 f202 	mul.w	r2, r3, r2
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	8afb      	ldrh	r3, [r7, #22]
 8004bec:	04d9      	lsls	r1, r3, #19
 8004bee:	4b38      	ldr	r3, [pc, #224]	@ (8004cd0 <USB_EPStartXfer+0x538>)
 8004bf0:	400b      	ands	r3, r1
 8004bf2:	69b9      	ldr	r1, [r7, #24]
 8004bf4:	0148      	lsls	r0, r1, #5
 8004bf6:	69f9      	ldr	r1, [r7, #28]
 8004bf8:	4401      	add	r1, r0
 8004bfa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c18:	69b9      	ldr	r1, [r7, #24]
 8004c1a:	0148      	lsls	r0, r1, #5
 8004c1c:	69f9      	ldr	r1, [r7, #28]
 8004c1e:	4401      	add	r1, r0
 8004c20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c24:	4313      	orrs	r3, r2
 8004c26:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10d      	bne.n	8004c4a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	68d9      	ldr	r1, [r3, #12]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c46:	460a      	mov	r2, r1
 8004c48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	791b      	ldrb	r3, [r3, #4]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d128      	bne.n	8004ca4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d110      	bne.n	8004c84 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e00f      	b.n	8004ca4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cbe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004cc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	1ff80000 	.word	0x1ff80000

08004cd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d14a      	bne.n	8004d88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d0a:	f040 8086 	bne.w	8004e1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	7812      	ldrb	r2, [r2, #0]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d902      	bls.n	8004d6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
          break;
 8004d6a:	e056      	b.n	8004e1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d84:	d0e7      	beq.n	8004d56 <USB_EPStopXfer+0x82>
 8004d86:	e048      	b.n	8004e1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004da0:	d13b      	bne.n	8004e1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004dc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004de4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004de8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d902      	bls.n	8004e00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8004dfe:	e00c      	b.n	8004e1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e18:	d0e7      	beq.n	8004dea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b089      	sub	sp, #36	@ 0x24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	4611      	mov	r1, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	460b      	mov	r3, r1
 8004e38:	71fb      	strb	r3, [r7, #7]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d123      	bne.n	8004e96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e4e:	88bb      	ldrh	r3, [r7, #4]
 8004e50:	3303      	adds	r3, #3
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e018      	b.n	8004e8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	031a      	lsls	r2, r3, #12
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e68:	461a      	mov	r2, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	3301      	adds	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d3e2      	bcc.n	8004e5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3724      	adds	r7, #36	@ 0x24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b08b      	sub	sp, #44	@ 0x2c
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	089b      	lsrs	r3, r3, #2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	e014      	b.n	8004efa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	601a      	str	r2, [r3, #0]
    pDest++;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ede:	3301      	adds	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	3301      	adds	r3, #1
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	6a3a      	ldr	r2, [r7, #32]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d3e6      	bcc.n	8004ed0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f02:	8bfb      	ldrh	r3, [r7, #30]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01e      	beq.n	8004f46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f12:	461a      	mov	r2, r3
 8004f14:	f107 0310 	add.w	r3, r7, #16
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	701a      	strb	r2, [r3, #0]
      i++;
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	3301      	adds	r3, #1
 8004f32:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	3301      	adds	r3, #1
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004f3a:	8bfb      	ldrh	r3, [r7, #30]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f40:	8bfb      	ldrh	r3, [r7, #30]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ea      	bne.n	8004f1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	372c      	adds	r7, #44	@ 0x2c
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d12c      	bne.n	8004fca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	db12      	blt.n	8004fa8 <USB_EPSetStall+0x54>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00f      	beq.n	8004fa8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fa6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	e02b      	b.n	8005022 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db12      	blt.n	8005002 <USB_EPSetStall+0xae>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00f      	beq.n	8005002 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ffc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005000:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800501c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005020:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	785b      	ldrb	r3, [r3, #1]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d128      	bne.n	800509e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005066:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800506a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	791b      	ldrb	r3, [r3, #4]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d003      	beq.n	800507c <USB_EPClearStall+0x4c>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	791b      	ldrb	r3, [r3, #4]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d138      	bne.n	80050ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e027      	b.n	80050ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	791b      	ldrb	r3, [r3, #4]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d003      	beq.n	80050ce <USB_EPClearStall+0x9e>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	791b      	ldrb	r3, [r3, #4]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d10f      	bne.n	80050ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800511a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800511e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005130:	68f9      	ldr	r1, [r7, #12]
 8005132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005162:	f023 0303 	bic.w	r3, r3, #3
 8005166:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005176:	f023 0302 	bic.w	r3, r3, #2
 800517a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800518a:	b480      	push	{r7}
 800518c:	b085      	sub	sp, #20
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051a4:	f023 0303 	bic.w	r3, r3, #3
 80051a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051b8:	f043 0302 	orr.w	r3, r3, #2
 80051bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4013      	ands	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051e4:	68fb      	ldr	r3, [r7, #12]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	0c1b      	lsrs	r3, r3, #16
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	b29b      	uxth	r3, r3
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	4013      	ands	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005288:	68bb      	ldr	r3, [r7, #8]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005296:	b480      	push	{r7}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	01db      	lsls	r3, r3, #7
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4013      	ands	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052e4:	68bb      	ldr	r3, [r7, #8]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0301 	and.w	r3, r3, #1
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005328:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800532c:	f023 0307 	bic.w	r3, r3, #7
 8005330:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005344:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	460b      	mov	r3, r1
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	333c      	adds	r3, #60	@ 0x3c
 800536a:	3304      	adds	r3, #4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4a26      	ldr	r2, [pc, #152]	@ (800540c <USB_EP0_OutStart+0xb8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d90a      	bls.n	800538e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005388:	d101      	bne.n	800538e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e037      	b.n	80053fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005394:	461a      	mov	r2, r3
 8005396:	2300      	movs	r3, #0
 8005398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053bc:	f043 0318 	orr.w	r3, r3, #24
 80053c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053d0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80053d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053d6:	7afb      	ldrb	r3, [r7, #11]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d10f      	bne.n	80053fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e2:	461a      	mov	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80053fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	4f54300a 	.word	0x4f54300a

08005410 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005428:	d901      	bls.n	800542e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e01b      	b.n	8005466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	daf2      	bge.n	800541c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f043 0201 	orr.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3301      	adds	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005452:	d901      	bls.n	8005458 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e006      	b.n	8005466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d0f0      	beq.n	8005446 <USB_CoreReset+0x36>

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005480:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005484:	f002 fc9e 	bl	8007dc4 <USBD_static_malloc>
 8005488:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d109      	bne.n	80054a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	32b0      	adds	r2, #176	@ 0xb0
 800549a:	2100      	movs	r1, #0
 800549c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80054a0:	2302      	movs	r3, #2
 80054a2:	e0d4      	b.n	800564e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80054a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80054a8:	2100      	movs	r1, #0
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f002 fcce 	bl	8007e4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	32b0      	adds	r2, #176	@ 0xb0
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	32b0      	adds	r2, #176	@ 0xb0
 80054ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7c1b      	ldrb	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d138      	bne.n	800554e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005658 <USBD_CDC_Init+0x1e4>)
 80054de:	7819      	ldrb	r1, [r3, #0]
 80054e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054e4:	2202      	movs	r2, #2
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f002 fb49 	bl	8007b7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80054ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005658 <USBD_CDC_Init+0x1e4>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	3324      	adds	r3, #36	@ 0x24
 8005502:	2201      	movs	r2, #1
 8005504:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005506:	4b55      	ldr	r3, [pc, #340]	@ (800565c <USBD_CDC_Init+0x1e8>)
 8005508:	7819      	ldrb	r1, [r3, #0]
 800550a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800550e:	2202      	movs	r2, #2
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f002 fb34 	bl	8007b7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005516:	4b51      	ldr	r3, [pc, #324]	@ (800565c <USBD_CDC_Init+0x1e8>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	f003 020f 	and.w	r2, r3, #15
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800552e:	2201      	movs	r2, #1
 8005530:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005532:	4b4b      	ldr	r3, [pc, #300]	@ (8005660 <USBD_CDC_Init+0x1ec>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	3326      	adds	r3, #38	@ 0x26
 8005548:	2210      	movs	r2, #16
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e035      	b.n	80055ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800554e:	4b42      	ldr	r3, [pc, #264]	@ (8005658 <USBD_CDC_Init+0x1e4>)
 8005550:	7819      	ldrb	r1, [r3, #0]
 8005552:	2340      	movs	r3, #64	@ 0x40
 8005554:	2202      	movs	r2, #2
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f002 fb11 	bl	8007b7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800555c:	4b3e      	ldr	r3, [pc, #248]	@ (8005658 <USBD_CDC_Init+0x1e4>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	3324      	adds	r3, #36	@ 0x24
 8005572:	2201      	movs	r2, #1
 8005574:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005576:	4b39      	ldr	r3, [pc, #228]	@ (800565c <USBD_CDC_Init+0x1e8>)
 8005578:	7819      	ldrb	r1, [r3, #0]
 800557a:	2340      	movs	r3, #64	@ 0x40
 800557c:	2202      	movs	r2, #2
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f002 fafd 	bl	8007b7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005584:	4b35      	ldr	r3, [pc, #212]	@ (800565c <USBD_CDC_Init+0x1e8>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800559c:	2201      	movs	r2, #1
 800559e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80055a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005660 <USBD_CDC_Init+0x1ec>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3326      	adds	r3, #38	@ 0x26
 80055b6:	2210      	movs	r2, #16
 80055b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055ba:	4b29      	ldr	r3, [pc, #164]	@ (8005660 <USBD_CDC_Init+0x1ec>)
 80055bc:	7819      	ldrb	r1, [r3, #0]
 80055be:	2308      	movs	r3, #8
 80055c0:	2203      	movs	r2, #3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f002 fadb 	bl	8007b7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80055c8:	4b25      	ldr	r3, [pc, #148]	@ (8005660 <USBD_CDC_Init+0x1ec>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	f003 020f 	and.w	r2, r3, #15
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	3324      	adds	r3, #36	@ 0x24
 80055de:	2201      	movs	r2, #1
 80055e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	33b0      	adds	r3, #176	@ 0xb0
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005618:	2302      	movs	r3, #2
 800561a:	e018      	b.n	800564e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	7c1b      	ldrb	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005624:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <USBD_CDC_Init+0x1e8>)
 8005626:	7819      	ldrb	r1, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800562e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f002 fb92 	bl	8007d5c <USBD_LL_PrepareReceive>
 8005638:	e008      	b.n	800564c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800563a:	4b08      	ldr	r3, [pc, #32]	@ (800565c <USBD_CDC_Init+0x1e8>)
 800563c:	7819      	ldrb	r1, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005644:	2340      	movs	r3, #64	@ 0x40
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f002 fb88 	bl	8007d5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000093 	.word	0x20000093
 800565c:	20000094 	.word	0x20000094
 8005660:	20000095 	.word	0x20000095

08005664 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005670:	4b3a      	ldr	r3, [pc, #232]	@ (800575c <USBD_CDC_DeInit+0xf8>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f002 faa7 	bl	8007bca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800567c:	4b37      	ldr	r3, [pc, #220]	@ (800575c <USBD_CDC_DeInit+0xf8>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	f003 020f 	and.w	r2, r3, #15
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	3324      	adds	r3, #36	@ 0x24
 8005692:	2200      	movs	r2, #0
 8005694:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005696:	4b32      	ldr	r3, [pc, #200]	@ (8005760 <USBD_CDC_DeInit+0xfc>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f002 fa94 	bl	8007bca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80056a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005760 <USBD_CDC_DeInit+0xfc>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f003 020f 	and.w	r2, r3, #15
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056ba:	2200      	movs	r2, #0
 80056bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80056be:	4b29      	ldr	r3, [pc, #164]	@ (8005764 <USBD_CDC_DeInit+0x100>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f002 fa80 	bl	8007bca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80056ca:	4b26      	ldr	r3, [pc, #152]	@ (8005764 <USBD_CDC_DeInit+0x100>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3324      	adds	r3, #36	@ 0x24
 80056e0:	2200      	movs	r2, #0
 80056e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80056e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005764 <USBD_CDC_DeInit+0x100>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f003 020f 	and.w	r2, r3, #15
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	3326      	adds	r3, #38	@ 0x26
 80056fa:	2200      	movs	r2, #0
 80056fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	32b0      	adds	r2, #176	@ 0xb0
 8005708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01f      	beq.n	8005750 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	33b0      	adds	r3, #176	@ 0xb0
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	32b0      	adds	r2, #176	@ 0xb0
 800572e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005732:	4618      	mov	r0, r3
 8005734:	f002 fb54 	bl	8007de0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	32b0      	adds	r2, #176	@ 0xb0
 8005742:	2100      	movs	r1, #0
 8005744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000093 	.word	0x20000093
 8005760:	20000094 	.word	0x20000094
 8005764:	20000095 	.word	0x20000095

08005768 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	32b0      	adds	r2, #176	@ 0xb0
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005794:	2303      	movs	r3, #3
 8005796:	e0bf      	b.n	8005918 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d050      	beq.n	8005846 <USBD_CDC_Setup+0xde>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	f040 80af 	bne.w	8005908 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	88db      	ldrh	r3, [r3, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d03a      	beq.n	8005828 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	b25b      	sxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da1b      	bge.n	80057f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	33b0      	adds	r3, #176	@ 0xb0
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80057d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	88d2      	ldrh	r2, [r2, #6]
 80057d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	88db      	ldrh	r3, [r3, #6]
 80057de:	2b07      	cmp	r3, #7
 80057e0:	bf28      	it	cs
 80057e2:	2307      	movcs	r3, #7
 80057e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	89fa      	ldrh	r2, [r7, #14]
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fd93 	bl	8007318 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80057f2:	e090      	b.n	8005916 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	785a      	ldrb	r2, [r3, #1]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	88db      	ldrh	r3, [r3, #6]
 8005802:	2b3f      	cmp	r3, #63	@ 0x3f
 8005804:	d803      	bhi.n	800580e <USBD_CDC_Setup+0xa6>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	88db      	ldrh	r3, [r3, #6]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	e000      	b.n	8005810 <USBD_CDC_Setup+0xa8>
 800580e:	2240      	movs	r2, #64	@ 0x40
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005816:	6939      	ldr	r1, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800581e:	461a      	mov	r2, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 fda5 	bl	8007370 <USBD_CtlPrepareRx>
      break;
 8005826:	e076      	b.n	8005916 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	33b0      	adds	r3, #176	@ 0xb0
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	7850      	ldrb	r0, [r2, #1]
 800583e:	2200      	movs	r2, #0
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	4798      	blx	r3
      break;
 8005844:	e067      	b.n	8005916 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b0b      	cmp	r3, #11
 800584c:	d851      	bhi.n	80058f2 <USBD_CDC_Setup+0x18a>
 800584e:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <USBD_CDC_Setup+0xec>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	08005885 	.word	0x08005885
 8005858:	08005901 	.word	0x08005901
 800585c:	080058f3 	.word	0x080058f3
 8005860:	080058f3 	.word	0x080058f3
 8005864:	080058f3 	.word	0x080058f3
 8005868:	080058f3 	.word	0x080058f3
 800586c:	080058f3 	.word	0x080058f3
 8005870:	080058f3 	.word	0x080058f3
 8005874:	080058f3 	.word	0x080058f3
 8005878:	080058f3 	.word	0x080058f3
 800587c:	080058af 	.word	0x080058af
 8005880:	080058d9 	.word	0x080058d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b03      	cmp	r3, #3
 800588e:	d107      	bne.n	80058a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005890:	f107 030a 	add.w	r3, r7, #10
 8005894:	2202      	movs	r2, #2
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fd3d 	bl	8007318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800589e:	e032      	b.n	8005906 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fcbb 	bl	800721e <USBD_CtlError>
            ret = USBD_FAIL;
 80058a8:	2303      	movs	r3, #3
 80058aa:	75fb      	strb	r3, [r7, #23]
          break;
 80058ac:	e02b      	b.n	8005906 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d107      	bne.n	80058ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058ba:	f107 030d 	add.w	r3, r7, #13
 80058be:	2201      	movs	r2, #1
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fd28 	bl	8007318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058c8:	e01d      	b.n	8005906 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fca6 	bl	800721e <USBD_CtlError>
            ret = USBD_FAIL;
 80058d2:	2303      	movs	r3, #3
 80058d4:	75fb      	strb	r3, [r7, #23]
          break;
 80058d6:	e016      	b.n	8005906 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d00f      	beq.n	8005904 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 fc99 	bl	800721e <USBD_CtlError>
            ret = USBD_FAIL;
 80058ec:	2303      	movs	r3, #3
 80058ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058f0:	e008      	b.n	8005904 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 fc92 	bl	800721e <USBD_CtlError>
          ret = USBD_FAIL;
 80058fa:	2303      	movs	r3, #3
 80058fc:	75fb      	strb	r3, [r7, #23]
          break;
 80058fe:	e002      	b.n	8005906 <USBD_CDC_Setup+0x19e>
          break;
 8005900:	bf00      	nop
 8005902:	e008      	b.n	8005916 <USBD_CDC_Setup+0x1ae>
          break;
 8005904:	bf00      	nop
      }
      break;
 8005906:	e006      	b.n	8005916 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 fc87 	bl	800721e <USBD_CtlError>
      ret = USBD_FAIL;
 8005910:	2303      	movs	r3, #3
 8005912:	75fb      	strb	r3, [r7, #23]
      break;
 8005914:	bf00      	nop
  }

  return (uint8_t)ret;
 8005916:	7dfb      	ldrb	r3, [r7, #23]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005932:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	32b0      	adds	r2, #176	@ 0xb0
 800593e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005946:	2303      	movs	r3, #3
 8005948:	e065      	b.n	8005a16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	32b0      	adds	r2, #176	@ 0xb0
 8005954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005958:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	3318      	adds	r3, #24
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d02f      	beq.n	80059d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	f003 020f 	and.w	r2, r3, #15
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	3318      	adds	r3, #24
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	f003 010f 	and.w	r1, r3, #15
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	460b      	mov	r3, r1
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	440b      	add	r3, r1
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4403      	add	r3, r0
 800599c:	331c      	adds	r3, #28
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d112      	bne.n	80059d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	f003 020f 	and.w	r2, r3, #15
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	3318      	adds	r3, #24
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059c6:	78f9      	ldrb	r1, [r7, #3]
 80059c8:	2300      	movs	r3, #0
 80059ca:	2200      	movs	r2, #0
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f002 f9a4 	bl	8007d1a <USBD_LL_Transmit>
 80059d2:	e01f      	b.n	8005a14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	33b0      	adds	r3, #176	@ 0xb0
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d010      	beq.n	8005a14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	33b0      	adds	r3, #176	@ 0xb0
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	32b0      	adds	r2, #176	@ 0xb0
 8005a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	32b0      	adds	r2, #176	@ 0xb0
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e01a      	b.n	8005a86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f002 f9a2 	bl	8007d9e <USBD_LL_GetRxDataSize>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	33b0      	adds	r3, #176	@ 0xb0
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005a80:	4611      	mov	r1, r2
 8005a82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	32b0      	adds	r2, #176	@ 0xb0
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e024      	b.n	8005afa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	33b0      	adds	r3, #176	@ 0xb0
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d019      	beq.n	8005af8 <USBD_CDC_EP0_RxReady+0x6a>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005aca:	2bff      	cmp	r3, #255	@ 0xff
 8005acc:	d014      	beq.n	8005af8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	33b0      	adds	r3, #176	@ 0xb0
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005ae6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005aee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	22ff      	movs	r2, #255	@ 0xff
 8005af4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b0c:	2182      	movs	r1, #130	@ 0x82
 8005b0e:	4818      	ldr	r0, [pc, #96]	@ (8005b70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b10:	f000 fd4f 	bl	80065b2 <USBD_GetEpDesc>
 8005b14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b16:	2101      	movs	r1, #1
 8005b18:	4815      	ldr	r0, [pc, #84]	@ (8005b70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b1a:	f000 fd4a 	bl	80065b2 <USBD_GetEpDesc>
 8005b1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b20:	2181      	movs	r1, #129	@ 0x81
 8005b22:	4813      	ldr	r0, [pc, #76]	@ (8005b70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b24:	f000 fd45 	bl	80065b2 <USBD_GetEpDesc>
 8005b28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2210      	movs	r2, #16
 8005b34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b44:	711a      	strb	r2, [r3, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d006      	beq.n	8005b5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b58:	711a      	strb	r2, [r3, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2243      	movs	r2, #67	@ 0x43
 8005b62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b64:	4b02      	ldr	r3, [pc, #8]	@ (8005b70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000050 	.word	0x20000050

08005b74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b7c:	2182      	movs	r1, #130	@ 0x82
 8005b7e:	4818      	ldr	r0, [pc, #96]	@ (8005be0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b80:	f000 fd17 	bl	80065b2 <USBD_GetEpDesc>
 8005b84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b86:	2101      	movs	r1, #1
 8005b88:	4815      	ldr	r0, [pc, #84]	@ (8005be0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b8a:	f000 fd12 	bl	80065b2 <USBD_GetEpDesc>
 8005b8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b90:	2181      	movs	r1, #129	@ 0x81
 8005b92:	4813      	ldr	r0, [pc, #76]	@ (8005be0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b94:	f000 fd0d 	bl	80065b2 <USBD_GetEpDesc>
 8005b98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d006      	beq.n	8005bba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	711a      	strb	r2, [r3, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f042 0202 	orr.w	r2, r2, #2
 8005bb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d006      	beq.n	8005bce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	711a      	strb	r2, [r3, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f042 0202 	orr.w	r2, r2, #2
 8005bcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2243      	movs	r2, #67	@ 0x43
 8005bd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bd4:	4b02      	ldr	r3, [pc, #8]	@ (8005be0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000050 	.word	0x20000050

08005be4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bec:	2182      	movs	r1, #130	@ 0x82
 8005bee:	4818      	ldr	r0, [pc, #96]	@ (8005c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bf0:	f000 fcdf 	bl	80065b2 <USBD_GetEpDesc>
 8005bf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4815      	ldr	r0, [pc, #84]	@ (8005c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bfa:	f000 fcda 	bl	80065b2 <USBD_GetEpDesc>
 8005bfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c00:	2181      	movs	r1, #129	@ 0x81
 8005c02:	4813      	ldr	r0, [pc, #76]	@ (8005c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c04:	f000 fcd5 	bl	80065b2 <USBD_GetEpDesc>
 8005c08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2210      	movs	r2, #16
 8005c14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d006      	beq.n	8005c2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c24:	711a      	strb	r2, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d006      	beq.n	8005c3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c38:	711a      	strb	r2, [r3, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2243      	movs	r2, #67	@ 0x43
 8005c42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c44:	4b02      	ldr	r3, [pc, #8]	@ (8005c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000050 	.word	0x20000050

08005c54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	220a      	movs	r2, #10
 8005c60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c62:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	2000000c 	.word	0x2000000c

08005c74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e009      	b.n	8005c9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	33b0      	adds	r3, #176	@ 0xb0
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	32b0      	adds	r2, #176	@ 0xb0
 8005cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e008      	b.n	8005ce0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	32b0      	adds	r2, #176	@ 0xb0
 8005d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e004      	b.n	8005d1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	32b0      	adds	r2, #176	@ 0xb0
 8005d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e025      	b.n	8005d9a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11f      	bne.n	8005d98 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005d60:	4b10      	ldr	r3, [pc, #64]	@ (8005da4 <USBD_CDC_TransmitPacket+0x7c>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	f003 020f 	and.w	r2, r3, #15
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4403      	add	r3, r0
 8005d7a:	3318      	adds	r3, #24
 8005d7c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <USBD_CDC_TransmitPacket+0x7c>)
 8005d80:	7819      	ldrb	r1, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 ffc3 	bl	8007d1a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000093 	.word	0x20000093

08005da8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	32b0      	adds	r2, #176	@ 0xb0
 8005dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	32b0      	adds	r2, #176	@ 0xb0
 8005dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e018      	b.n	8005e08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7c1b      	ldrb	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dde:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <USBD_CDC_ReceivePacket+0x68>)
 8005de0:	7819      	ldrb	r1, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 ffb5 	bl	8007d5c <USBD_LL_PrepareReceive>
 8005df2:	e008      	b.n	8005e06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005df4:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <USBD_CDC_ReceivePacket+0x68>)
 8005df6:	7819      	ldrb	r1, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005dfe:	2340      	movs	r3, #64	@ 0x40
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 ffab 	bl	8007d5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20000094 	.word	0x20000094

08005e14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e01f      	b.n	8005e6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	79fa      	ldrb	r2, [r7, #7]
 8005e5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f001 fe25 	bl	8007ab0 <USBD_LL_Init>
 8005e66:	4603      	mov	r3, r0
 8005e68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e025      	b.n	8005ed8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	32ae      	adds	r2, #174	@ 0xae
 8005e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00f      	beq.n	8005ec8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	32ae      	adds	r2, #174	@ 0xae
 8005eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb8:	f107 020e 	add.w	r2, r7, #14
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4798      	blx	r3
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f001 fe2d 	bl	8007b48 <USBD_LL_Start>
 8005eee:	4603      	mov	r3, r0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	78fa      	ldrb	r2, [r7, #3]
 8005f32:	4611      	mov	r1, r2
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	78fa      	ldrb	r2, [r7, #3]
 8005f60:	4611      	mov	r1, r2
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 f90c 	bl	80071aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d01a      	beq.n	8005fec <USBD_LL_SetupStage+0x72>
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d822      	bhi.n	8006000 <USBD_LL_SetupStage+0x86>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <USBD_LL_SetupStage+0x4a>
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d00a      	beq.n	8005fd8 <USBD_LL_SetupStage+0x5e>
 8005fc2:	e01d      	b.n	8006000 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fb63 	bl	8006698 <USBD_StdDevReq>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd6:	e020      	b.n	800601a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fbcb 	bl	800677c <USBD_StdItfReq>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fea:	e016      	b.n	800601a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fc2d 	bl	8006854 <USBD_StdEPReq>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffe:	e00c      	b.n	800601a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006006:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800600a:	b2db      	uxtb	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fdfa 	bl	8007c08 <USBD_LL_StallEP>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
      break;
 8006018:	bf00      	nop
  }

  return ret;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	460b      	mov	r3, r1
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006036:	7afb      	ldrb	r3, [r7, #11]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d16e      	bne.n	800611a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006042:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800604a:	2b03      	cmp	r3, #3
 800604c:	f040 8098 	bne.w	8006180 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	429a      	cmp	r2, r3
 800605a:	d913      	bls.n	8006084 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	1ad2      	subs	r2, r2, r3
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	4293      	cmp	r3, r2
 8006074:	bf28      	it	cs
 8006076:	4613      	movcs	r3, r2
 8006078:	461a      	mov	r2, r3
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f001 f994 	bl	80073aa <USBD_CtlContinueRx>
 8006082:	e07d      	b.n	8006180 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	2b02      	cmp	r3, #2
 8006090:	d014      	beq.n	80060bc <USBD_LL_DataOutStage+0x98>
 8006092:	2b02      	cmp	r3, #2
 8006094:	d81d      	bhi.n	80060d2 <USBD_LL_DataOutStage+0xae>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <USBD_LL_DataOutStage+0x7c>
 800609a:	2b01      	cmp	r3, #1
 800609c:	d003      	beq.n	80060a6 <USBD_LL_DataOutStage+0x82>
 800609e:	e018      	b.n	80060d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	75bb      	strb	r3, [r7, #22]
            break;
 80060a4:	e018      	b.n	80060d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	4619      	mov	r1, r3
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fa64 	bl	800657e <USBD_CoreFindIF>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75bb      	strb	r3, [r7, #22]
            break;
 80060ba:	e00d      	b.n	80060d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	4619      	mov	r1, r3
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fa66 	bl	8006598 <USBD_CoreFindEP>
 80060cc:	4603      	mov	r3, r0
 80060ce:	75bb      	strb	r3, [r7, #22]
            break;
 80060d0:	e002      	b.n	80060d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	75bb      	strb	r3, [r7, #22]
            break;
 80060d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060d8:	7dbb      	ldrb	r3, [r7, #22]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d119      	bne.n	8006112 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d113      	bne.n	8006112 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060ea:	7dba      	ldrb	r2, [r7, #22]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	32ae      	adds	r2, #174	@ 0xae
 80060f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00b      	beq.n	8006112 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80060fa:	7dba      	ldrb	r2, [r7, #22]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006102:	7dba      	ldrb	r2, [r7, #22]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	32ae      	adds	r2, #174	@ 0xae
 8006108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f001 f95a 	bl	80073cc <USBD_CtlSendStatus>
 8006118:	e032      	b.n	8006180 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006120:	b2db      	uxtb	r3, r3
 8006122:	4619      	mov	r1, r3
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fa37 	bl	8006598 <USBD_CoreFindEP>
 800612a:	4603      	mov	r3, r0
 800612c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800612e:	7dbb      	ldrb	r3, [r7, #22]
 8006130:	2bff      	cmp	r3, #255	@ 0xff
 8006132:	d025      	beq.n	8006180 <USBD_LL_DataOutStage+0x15c>
 8006134:	7dbb      	ldrb	r3, [r7, #22]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d122      	bne.n	8006180 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b03      	cmp	r3, #3
 8006144:	d117      	bne.n	8006176 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006146:	7dba      	ldrb	r2, [r7, #22]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	32ae      	adds	r2, #174	@ 0xae
 800614c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00f      	beq.n	8006176 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006156:	7dba      	ldrb	r2, [r7, #22]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800615e:	7dba      	ldrb	r2, [r7, #22]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	32ae      	adds	r2, #174	@ 0xae
 8006164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	7afa      	ldrb	r2, [r7, #11]
 800616c:	4611      	mov	r1, r2
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	e000      	b.n	8006182 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b086      	sub	sp, #24
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	460b      	mov	r3, r1
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006198:	7afb      	ldrb	r3, [r7, #11]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d16f      	bne.n	800627e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3314      	adds	r3, #20
 80061a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d15a      	bne.n	8006264 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d914      	bls.n	80061e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	1ad2      	subs	r2, r2, r3
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f001 f8bc 	bl	800734e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061d6:	2300      	movs	r3, #0
 80061d8:	2200      	movs	r2, #0
 80061da:	2100      	movs	r1, #0
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f001 fdbd 	bl	8007d5c <USBD_LL_PrepareReceive>
 80061e2:	e03f      	b.n	8006264 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d11c      	bne.n	800622a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d316      	bcc.n	800622a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006206:	429a      	cmp	r2, r3
 8006208:	d20f      	bcs.n	800622a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800620a:	2200      	movs	r2, #0
 800620c:	2100      	movs	r1, #0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f001 f89d 	bl	800734e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800621c:	2300      	movs	r3, #0
 800621e:	2200      	movs	r2, #0
 8006220:	2100      	movs	r1, #0
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f001 fd9a 	bl	8007d5c <USBD_LL_PrepareReceive>
 8006228:	e01c      	b.n	8006264 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b03      	cmp	r3, #3
 8006234:	d10f      	bne.n	8006256 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006256:	2180      	movs	r1, #128	@ 0x80
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f001 fcd5 	bl	8007c08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 f8c7 	bl	80073f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d03a      	beq.n	80062e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff fe42 	bl	8005ef8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800627c:	e032      	b.n	80062e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006284:	b2db      	uxtb	r3, r3
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f985 	bl	8006598 <USBD_CoreFindEP>
 800628e:	4603      	mov	r3, r0
 8006290:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	2bff      	cmp	r3, #255	@ 0xff
 8006296:	d025      	beq.n	80062e4 <USBD_LL_DataInStage+0x15a>
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d122      	bne.n	80062e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d11c      	bne.n	80062e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062aa:	7dfa      	ldrb	r2, [r7, #23]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	32ae      	adds	r2, #174	@ 0xae
 80062b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d014      	beq.n	80062e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062ba:	7dfa      	ldrb	r2, [r7, #23]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062c2:	7dfa      	ldrb	r2, [r7, #23]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	32ae      	adds	r2, #174	@ 0xae
 80062c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	7afa      	ldrb	r2, [r7, #11]
 80062d0:	4611      	mov	r1, r2
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	4798      	blx	r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062da:	7dbb      	ldrb	r3, [r7, #22]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062e0:	7dbb      	ldrb	r3, [r7, #22]
 80062e2:	e000      	b.n	80062e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d014      	beq.n	8006354 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00e      	beq.n	8006354 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6852      	ldr	r2, [r2, #4]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	4611      	mov	r1, r2
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006350:	2303      	movs	r3, #3
 8006352:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006354:	2340      	movs	r3, #64	@ 0x40
 8006356:	2200      	movs	r2, #0
 8006358:	2100      	movs	r1, #0
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fc0f 	bl	8007b7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2240      	movs	r2, #64	@ 0x40
 800636c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006370:	2340      	movs	r3, #64	@ 0x40
 8006372:	2200      	movs	r2, #0
 8006374:	2180      	movs	r1, #128	@ 0x80
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fc01 	bl	8007b7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2240      	movs	r2, #64	@ 0x40
 8006386:	621a      	str	r2, [r3, #32]

  return ret;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d006      	beq.n	80063d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2204      	movs	r2, #4
 80063d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d106      	bne.n	800640c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006404:	b2da      	uxtb	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b03      	cmp	r3, #3
 800642c:	d110      	bne.n	8006450 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00b      	beq.n	8006450 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	460b      	mov	r3, r1
 8006464:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	32ae      	adds	r2, #174	@ 0xae
 8006470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006478:	2303      	movs	r3, #3
 800647a:	e01c      	b.n	80064b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b03      	cmp	r3, #3
 8006486:	d115      	bne.n	80064b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	32ae      	adds	r2, #174	@ 0xae
 8006492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	32ae      	adds	r2, #174	@ 0xae
 80064a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	78fa      	ldrb	r2, [r7, #3]
 80064ae:	4611      	mov	r1, r2
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	32ae      	adds	r2, #174	@ 0xae
 80064d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064dc:	2303      	movs	r3, #3
 80064de:	e01c      	b.n	800651a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d115      	bne.n	8006518 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	32ae      	adds	r2, #174	@ 0xae
 80064f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	32ae      	adds	r2, #174	@ 0xae
 800650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006510:	78fa      	ldrb	r2, [r7, #3]
 8006512:	4611      	mov	r1, r2
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6852      	ldr	r2, [r2, #4]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	4611      	mov	r1, r2
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006570:	2303      	movs	r3, #3
 8006572:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800658a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	885b      	ldrh	r3, [r3, #2]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d91f      	bls.n	8006618 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065de:	e013      	b.n	8006608 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065e0:	f107 030a 	add.w	r3, r7, #10
 80065e4:	4619      	mov	r1, r3
 80065e6:	6978      	ldr	r0, [r7, #20]
 80065e8:	f000 f81b 	bl	8006622 <USBD_GetNextDesc>
 80065ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	2b05      	cmp	r3, #5
 80065f4:	d108      	bne.n	8006608 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	789b      	ldrb	r3, [r3, #2]
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	429a      	cmp	r2, r3
 8006602:	d008      	beq.n	8006616 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	885b      	ldrh	r3, [r3, #2]
 800660c:	b29a      	uxth	r2, r3
 800660e:	897b      	ldrh	r3, [r7, #10]
 8006610:	429a      	cmp	r2, r3
 8006612:	d8e5      	bhi.n	80065e0 <USBD_GetEpDesc+0x2e>
 8006614:	e000      	b.n	8006618 <USBD_GetEpDesc+0x66>
          break;
 8006616:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006618:	693b      	ldr	r3, [r7, #16]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	4413      	add	r3, r2
 800663a:	b29a      	uxth	r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4413      	add	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800664c:	68fb      	ldr	r3, [r7, #12]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800665a:	b480      	push	{r7}
 800665c:	b087      	sub	sp, #28
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	3301      	adds	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006678:	8a3b      	ldrh	r3, [r7, #16]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	b21a      	sxth	r2, r3
 800667e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006682:	4313      	orrs	r3, r2
 8006684:	b21b      	sxth	r3, r3
 8006686:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006688:	89fb      	ldrh	r3, [r7, #14]
}
 800668a:	4618      	mov	r0, r3
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066ae:	2b40      	cmp	r3, #64	@ 0x40
 80066b0:	d005      	beq.n	80066be <USBD_StdDevReq+0x26>
 80066b2:	2b40      	cmp	r3, #64	@ 0x40
 80066b4:	d857      	bhi.n	8006766 <USBD_StdDevReq+0xce>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00f      	beq.n	80066da <USBD_StdDevReq+0x42>
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d153      	bne.n	8006766 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	32ae      	adds	r2, #174	@ 0xae
 80066c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
      break;
 80066d8:	e04a      	b.n	8006770 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b09      	cmp	r3, #9
 80066e0:	d83b      	bhi.n	800675a <USBD_StdDevReq+0xc2>
 80066e2:	a201      	add	r2, pc, #4	@ (adr r2, 80066e8 <USBD_StdDevReq+0x50>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	08006751 	.word	0x08006751
 80066f0:	0800675b 	.word	0x0800675b
 80066f4:	08006747 	.word	0x08006747
 80066f8:	0800675b 	.word	0x0800675b
 80066fc:	0800671b 	.word	0x0800671b
 8006700:	08006711 	.word	0x08006711
 8006704:	0800675b 	.word	0x0800675b
 8006708:	08006733 	.word	0x08006733
 800670c:	08006725 	.word	0x08006725
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa3c 	bl	8006b90 <USBD_GetDescriptor>
          break;
 8006718:	e024      	b.n	8006764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fba1 	bl	8006e64 <USBD_SetAddress>
          break;
 8006722:	e01f      	b.n	8006764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fbe0 	bl	8006eec <USBD_SetConfig>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]
          break;
 8006730:	e018      	b.n	8006764 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc83 	bl	8007040 <USBD_GetConfig>
          break;
 800673a:	e013      	b.n	8006764 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fcb4 	bl	80070ac <USBD_GetStatus>
          break;
 8006744:	e00e      	b.n	8006764 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fce3 	bl	8007114 <USBD_SetFeature>
          break;
 800674e:	e009      	b.n	8006764 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fd07 	bl	8007166 <USBD_ClrFeature>
          break;
 8006758:	e004      	b.n	8006764 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fd5e 	bl	800721e <USBD_CtlError>
          break;
 8006762:	bf00      	nop
      }
      break;
 8006764:	e004      	b.n	8006770 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fd58 	bl	800721e <USBD_CtlError>
      break;
 800676e:	bf00      	nop
  }

  return ret;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop

0800677c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006792:	2b40      	cmp	r3, #64	@ 0x40
 8006794:	d005      	beq.n	80067a2 <USBD_StdItfReq+0x26>
 8006796:	2b40      	cmp	r3, #64	@ 0x40
 8006798:	d852      	bhi.n	8006840 <USBD_StdItfReq+0xc4>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <USBD_StdItfReq+0x26>
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d14e      	bne.n	8006840 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d840      	bhi.n	8006832 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	889b      	ldrh	r3, [r3, #4]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d836      	bhi.n	8006828 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	889b      	ldrh	r3, [r3, #4]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fedb 	bl	800657e <USBD_CoreFindIF>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	2bff      	cmp	r3, #255	@ 0xff
 80067d0:	d01d      	beq.n	800680e <USBD_StdItfReq+0x92>
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d11a      	bne.n	800680e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067d8:	7bba      	ldrb	r2, [r7, #14]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	32ae      	adds	r2, #174	@ 0xae
 80067de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00f      	beq.n	8006808 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067e8:	7bba      	ldrb	r2, [r7, #14]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067f0:	7bba      	ldrb	r2, [r7, #14]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	32ae      	adds	r2, #174	@ 0xae
 80067f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006806:	e004      	b.n	8006812 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800680c:	e001      	b.n	8006812 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800680e:	2303      	movs	r3, #3
 8006810:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	88db      	ldrh	r3, [r3, #6]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d110      	bne.n	800683c <USBD_StdItfReq+0xc0>
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10d      	bne.n	800683c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fdd3 	bl	80073cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006826:	e009      	b.n	800683c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fcf7 	bl	800721e <USBD_CtlError>
          break;
 8006830:	e004      	b.n	800683c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fcf2 	bl	800721e <USBD_CtlError>
          break;
 800683a:	e000      	b.n	800683e <USBD_StdItfReq+0xc2>
          break;
 800683c:	bf00      	nop
      }
      break;
 800683e:	e004      	b.n	800684a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fceb 	bl	800721e <USBD_CtlError>
      break;
 8006848:	bf00      	nop
  }

  return ret;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	889b      	ldrh	r3, [r3, #4]
 8006866:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006870:	2b40      	cmp	r3, #64	@ 0x40
 8006872:	d007      	beq.n	8006884 <USBD_StdEPReq+0x30>
 8006874:	2b40      	cmp	r3, #64	@ 0x40
 8006876:	f200 817f 	bhi.w	8006b78 <USBD_StdEPReq+0x324>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d02a      	beq.n	80068d4 <USBD_StdEPReq+0x80>
 800687e:	2b20      	cmp	r3, #32
 8006880:	f040 817a 	bne.w	8006b78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fe85 	bl	8006598 <USBD_CoreFindEP>
 800688e:	4603      	mov	r3, r0
 8006890:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006892:	7b7b      	ldrb	r3, [r7, #13]
 8006894:	2bff      	cmp	r3, #255	@ 0xff
 8006896:	f000 8174 	beq.w	8006b82 <USBD_StdEPReq+0x32e>
 800689a:	7b7b      	ldrb	r3, [r7, #13]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 8170 	bne.w	8006b82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068a2:	7b7a      	ldrb	r2, [r7, #13]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068aa:	7b7a      	ldrb	r2, [r7, #13]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	32ae      	adds	r2, #174	@ 0xae
 80068b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 8163 	beq.w	8006b82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068bc:	7b7a      	ldrb	r2, [r7, #13]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	32ae      	adds	r2, #174	@ 0xae
 80068c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068d2:	e156      	b.n	8006b82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d008      	beq.n	80068ee <USBD_StdEPReq+0x9a>
 80068dc:	2b03      	cmp	r3, #3
 80068de:	f300 8145 	bgt.w	8006b6c <USBD_StdEPReq+0x318>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 809b 	beq.w	8006a1e <USBD_StdEPReq+0x1ca>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d03c      	beq.n	8006966 <USBD_StdEPReq+0x112>
 80068ec:	e13e      	b.n	8006b6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d002      	beq.n	8006900 <USBD_StdEPReq+0xac>
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d016      	beq.n	800692c <USBD_StdEPReq+0xd8>
 80068fe:	e02c      	b.n	800695a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <USBD_StdEPReq+0xce>
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	2b80      	cmp	r3, #128	@ 0x80
 800690a:	d00a      	beq.n	8006922 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f979 	bl	8007c08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006916:	2180      	movs	r1, #128	@ 0x80
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 f975 	bl	8007c08 <USBD_LL_StallEP>
 800691e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006920:	e020      	b.n	8006964 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fc7a 	bl	800721e <USBD_CtlError>
              break;
 800692a:	e01b      	b.n	8006964 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	885b      	ldrh	r3, [r3, #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10e      	bne.n	8006952 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <USBD_StdEPReq+0xfe>
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b80      	cmp	r3, #128	@ 0x80
 800693e:	d008      	beq.n	8006952 <USBD_StdEPReq+0xfe>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f95b 	bl	8007c08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fd3a 	bl	80073cc <USBD_CtlSendStatus>

              break;
 8006958:	e004      	b.n	8006964 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fc5e 	bl	800721e <USBD_CtlError>
              break;
 8006962:	bf00      	nop
          }
          break;
 8006964:	e107      	b.n	8006b76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d002      	beq.n	8006978 <USBD_StdEPReq+0x124>
 8006972:	2b03      	cmp	r3, #3
 8006974:	d016      	beq.n	80069a4 <USBD_StdEPReq+0x150>
 8006976:	e04b      	b.n	8006a10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00d      	beq.n	800699a <USBD_StdEPReq+0x146>
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b80      	cmp	r3, #128	@ 0x80
 8006982:	d00a      	beq.n	800699a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 f93d 	bl	8007c08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800698e:	2180      	movs	r1, #128	@ 0x80
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f939 	bl	8007c08 <USBD_LL_StallEP>
 8006996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006998:	e040      	b.n	8006a1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc3e 	bl	800721e <USBD_CtlError>
              break;
 80069a2:	e03b      	b.n	8006a1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	885b      	ldrh	r3, [r3, #2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d136      	bne.n	8006a1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d004      	beq.n	80069c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 f943 	bl	8007c46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fd03 	bl	80073cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fde4 	bl	8006598 <USBD_CoreFindEP>
 80069d0:	4603      	mov	r3, r0
 80069d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069d4:	7b7b      	ldrb	r3, [r7, #13]
 80069d6:	2bff      	cmp	r3, #255	@ 0xff
 80069d8:	d01f      	beq.n	8006a1a <USBD_StdEPReq+0x1c6>
 80069da:	7b7b      	ldrb	r3, [r7, #13]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d11c      	bne.n	8006a1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069e0:	7b7a      	ldrb	r2, [r7, #13]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069e8:	7b7a      	ldrb	r2, [r7, #13]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	32ae      	adds	r2, #174	@ 0xae
 80069ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069f8:	7b7a      	ldrb	r2, [r7, #13]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32ae      	adds	r2, #174	@ 0xae
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a0e:	e004      	b.n	8006a1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fc03 	bl	800721e <USBD_CtlError>
              break;
 8006a18:	e000      	b.n	8006a1c <USBD_StdEPReq+0x1c8>
              break;
 8006a1a:	bf00      	nop
          }
          break;
 8006a1c:	e0ab      	b.n	8006b76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d002      	beq.n	8006a30 <USBD_StdEPReq+0x1dc>
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d032      	beq.n	8006a94 <USBD_StdEPReq+0x240>
 8006a2e:	e097      	b.n	8006b60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <USBD_StdEPReq+0x1f2>
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b80      	cmp	r3, #128	@ 0x80
 8006a3a:	d004      	beq.n	8006a46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fbed 	bl	800721e <USBD_CtlError>
                break;
 8006a44:	e091      	b.n	8006b6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da0b      	bge.n	8006a66 <USBD_StdEPReq+0x212>
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	3310      	adds	r3, #16
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	3304      	adds	r3, #4
 8006a64:	e00b      	b.n	8006a7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc43 	bl	8007318 <USBD_CtlSendData>
              break;
 8006a92:	e06a      	b.n	8006b6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da11      	bge.n	8006ac0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	3324      	adds	r3, #36	@ 0x24
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d117      	bne.n	8006ae6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fbb0 	bl	800721e <USBD_CtlError>
                  break;
 8006abe:	e054      	b.n	8006b6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fb9d 	bl	800721e <USBD_CtlError>
                  break;
 8006ae4:	e041      	b.n	8006b6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da0b      	bge.n	8006b06 <USBD_StdEPReq+0x2b2>
 8006aee:	7bbb      	ldrb	r3, [r7, #14]
 8006af0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	3310      	adds	r3, #16
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	3304      	adds	r3, #4
 8006b04:	e00b      	b.n	8006b1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <USBD_StdEPReq+0x2d8>
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	2b80      	cmp	r3, #128	@ 0x80
 8006b2a:	d103      	bne.n	8006b34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e00e      	b.n	8006b52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 f8a3 	bl	8007c84 <USBD_LL_IsStallEP>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e002      	b.n	8006b52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2202      	movs	r2, #2
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fbdd 	bl	8007318 <USBD_CtlSendData>
              break;
 8006b5e:	e004      	b.n	8006b6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fb5b 	bl	800721e <USBD_CtlError>
              break;
 8006b68:	bf00      	nop
          }
          break;
 8006b6a:	e004      	b.n	8006b76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb55 	bl	800721e <USBD_CtlError>
          break;
 8006b74:	bf00      	nop
      }
      break;
 8006b76:	e005      	b.n	8006b84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fb4f 	bl	800721e <USBD_CtlError>
      break;
 8006b80:	e000      	b.n	8006b84 <USBD_StdEPReq+0x330>
      break;
 8006b82:	bf00      	nop
  }

  return ret;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	885b      	ldrh	r3, [r3, #2]
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b06      	cmp	r3, #6
 8006bb2:	f200 8128 	bhi.w	8006e06 <USBD_GetDescriptor+0x276>
 8006bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <USBD_GetDescriptor+0x2c>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bd9 	.word	0x08006bd9
 8006bc0:	08006bf1 	.word	0x08006bf1
 8006bc4:	08006c31 	.word	0x08006c31
 8006bc8:	08006e07 	.word	0x08006e07
 8006bcc:	08006e07 	.word	0x08006e07
 8006bd0:	08006da7 	.word	0x08006da7
 8006bd4:	08006dd3 	.word	0x08006dd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	7c12      	ldrb	r2, [r2, #16]
 8006be4:	f107 0108 	add.w	r1, r7, #8
 8006be8:	4610      	mov	r0, r2
 8006bea:	4798      	blx	r3
 8006bec:	60f8      	str	r0, [r7, #12]
      break;
 8006bee:	e112      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	7c1b      	ldrb	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10d      	bne.n	8006c14 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	f107 0208 	add.w	r2, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	2202      	movs	r2, #2
 8006c10:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c12:	e100      	b.n	8006e16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	f107 0208 	add.w	r2, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	701a      	strb	r2, [r3, #0]
      break;
 8006c2e:	e0f2      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	885b      	ldrh	r3, [r3, #2]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	f200 80ac 	bhi.w	8006d94 <USBD_GetDescriptor+0x204>
 8006c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <USBD_GetDescriptor+0xb4>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c5d 	.word	0x08006c5d
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006cc5 	.word	0x08006cc5
 8006c50:	08006cf9 	.word	0x08006cf9
 8006c54:	08006d2d 	.word	0x08006d2d
 8006c58:	08006d61 	.word	0x08006d61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	7c12      	ldrb	r2, [r2, #16]
 8006c74:	f107 0108 	add.w	r1, r7, #8
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4798      	blx	r3
 8006c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c7e:	e091      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 facb 	bl	800721e <USBD_CtlError>
            err++;
 8006c88:	7afb      	ldrb	r3, [r7, #11]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c8e:	e089      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	7c12      	ldrb	r2, [r2, #16]
 8006ca8:	f107 0108 	add.w	r1, r7, #8
 8006cac:	4610      	mov	r0, r2
 8006cae:	4798      	blx	r3
 8006cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cb2:	e077      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fab1 	bl	800721e <USBD_CtlError>
            err++;
 8006cbc:	7afb      	ldrb	r3, [r7, #11]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cc2:	e06f      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7c12      	ldrb	r2, [r2, #16]
 8006cdc:	f107 0108 	add.w	r1, r7, #8
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce6:	e05d      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fa97 	bl	800721e <USBD_CtlError>
            err++;
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf6:	e055      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	7c12      	ldrb	r2, [r2, #16]
 8006d10:	f107 0108 	add.w	r1, r7, #8
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
 8006d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d1a:	e043      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa7d 	bl	800721e <USBD_CtlError>
            err++;
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	3301      	adds	r3, #1
 8006d28:	72fb      	strb	r3, [r7, #11]
          break;
 8006d2a:	e03b      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7c12      	ldrb	r2, [r2, #16]
 8006d44:	f107 0108 	add.w	r1, r7, #8
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4e:	e029      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa63 	bl	800721e <USBD_CtlError>
            err++;
 8006d58:	7afb      	ldrb	r3, [r7, #11]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5e:	e021      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	7c12      	ldrb	r2, [r2, #16]
 8006d78:	f107 0108 	add.w	r1, r7, #8
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d82:	e00f      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa49 	bl	800721e <USBD_CtlError>
            err++;
 8006d8c:	7afb      	ldrb	r3, [r7, #11]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	72fb      	strb	r3, [r7, #11]
          break;
 8006d92:	e007      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa41 	bl	800721e <USBD_CtlError>
          err++;
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006da2:	bf00      	nop
      }
      break;
 8006da4:	e037      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7c1b      	ldrb	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db6:	f107 0208 	add.w	r2, r7, #8
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4798      	blx	r3
 8006dbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dc0:	e029      	b.n	8006e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa2a 	bl	800721e <USBD_CtlError>
        err++;
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	72fb      	strb	r3, [r7, #11]
      break;
 8006dd0:	e021      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7c1b      	ldrb	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10d      	bne.n	8006df6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de2:	f107 0208 	add.w	r2, r7, #8
 8006de6:	4610      	mov	r0, r2
 8006de8:	4798      	blx	r3
 8006dea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	2207      	movs	r2, #7
 8006df2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006df4:	e00f      	b.n	8006e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa10 	bl	800721e <USBD_CtlError>
        err++;
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	3301      	adds	r3, #1
 8006e02:	72fb      	strb	r3, [r7, #11]
      break;
 8006e04:	e007      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa08 	bl	800721e <USBD_CtlError>
      err++;
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	3301      	adds	r3, #1
 8006e12:	72fb      	strb	r3, [r7, #11]
      break;
 8006e14:	bf00      	nop
  }

  if (err != 0U)
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d11e      	bne.n	8006e5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	88db      	ldrh	r3, [r3, #6]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d016      	beq.n	8006e52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e24:	893b      	ldrh	r3, [r7, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00e      	beq.n	8006e48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	88da      	ldrh	r2, [r3, #6]
 8006e2e:	893b      	ldrh	r3, [r7, #8]
 8006e30:	4293      	cmp	r3, r2
 8006e32:	bf28      	it	cs
 8006e34:	4613      	movcs	r3, r2
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e3a:	893b      	ldrh	r3, [r7, #8]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	68f9      	ldr	r1, [r7, #12]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa69 	bl	8007318 <USBD_CtlSendData>
 8006e46:	e009      	b.n	8006e5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f9e7 	bl	800721e <USBD_CtlError>
 8006e50:	e004      	b.n	8006e5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 faba 	bl	80073cc <USBD_CtlSendStatus>
 8006e58:	e000      	b.n	8006e5c <USBD_GetDescriptor+0x2cc>
    return;
 8006e5a:	bf00      	nop
  }
}
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop

08006e64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	889b      	ldrh	r3, [r3, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d131      	bne.n	8006eda <USBD_SetAddress+0x76>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	88db      	ldrh	r3, [r3, #6]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d12d      	bne.n	8006eda <USBD_SetAddress+0x76>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e84:	d829      	bhi.n	8006eda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	885b      	ldrh	r3, [r3, #2]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d104      	bne.n	8006ea8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f9bc 	bl	800721e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea6:	e01d      	b.n	8006ee4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7bfa      	ldrb	r2, [r7, #15]
 8006eac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 ff11 	bl	8007cdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa86 	bl	80073cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ece:	e009      	b.n	8006ee4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed8:	e004      	b.n	8006ee4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f99e 	bl	800721e <USBD_CtlError>
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	4b4e      	ldr	r3, [pc, #312]	@ (800703c <USBD_SetConfig+0x150>)
 8006f02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f04:	4b4d      	ldr	r3, [pc, #308]	@ (800703c <USBD_SetConfig+0x150>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d905      	bls.n	8006f18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f985 	bl	800721e <USBD_CtlError>
    return USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e08c      	b.n	8007032 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d002      	beq.n	8006f2a <USBD_SetConfig+0x3e>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d029      	beq.n	8006f7c <USBD_SetConfig+0x90>
 8006f28:	e075      	b.n	8007016 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f2a:	4b44      	ldr	r3, [pc, #272]	@ (800703c <USBD_SetConfig+0x150>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d020      	beq.n	8006f74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f32:	4b42      	ldr	r3, [pc, #264]	@ (800703c <USBD_SetConfig+0x150>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800703c <USBD_SetConfig+0x150>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fe ffe3 	bl	8005f0e <USBD_SetClassConfig>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f962 	bl	800721e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f62:	e065      	b.n	8007030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa31 	bl	80073cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f72:	e05d      	b.n	8007030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fa29 	bl	80073cc <USBD_CtlSendStatus>
      break;
 8006f7a:	e059      	b.n	8007030 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800703c <USBD_SetConfig+0x150>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d112      	bne.n	8006faa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800703c <USBD_SetConfig+0x150>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f96:	4b29      	ldr	r3, [pc, #164]	@ (800703c <USBD_SetConfig+0x150>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fe ffd2 	bl	8005f46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa12 	bl	80073cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fa8:	e042      	b.n	8007030 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006faa:	4b24      	ldr	r3, [pc, #144]	@ (800703c <USBD_SetConfig+0x150>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d02a      	beq.n	800700e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7fe ffc0 	bl	8005f46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800703c <USBD_SetConfig+0x150>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800703c <USBD_SetConfig+0x150>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fe ff99 	bl	8005f0e <USBD_SetClassConfig>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f918 	bl	800721e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fe ffa5 	bl	8005f46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007004:	e014      	b.n	8007030 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f9e0 	bl	80073cc <USBD_CtlSendStatus>
      break;
 800700c:	e010      	b.n	8007030 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f9dc 	bl	80073cc <USBD_CtlSendStatus>
      break;
 8007014:	e00c      	b.n	8007030 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f900 	bl	800721e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800701e:	4b07      	ldr	r3, [pc, #28]	@ (800703c <USBD_SetConfig+0x150>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fe ff8e 	bl	8005f46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800702a:	2303      	movs	r3, #3
 800702c:	73fb      	strb	r3, [r7, #15]
      break;
 800702e:	bf00      	nop
  }

  return ret;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	200001dc 	.word	0x200001dc

08007040 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	88db      	ldrh	r3, [r3, #6]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d004      	beq.n	800705c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f8e2 	bl	800721e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800705a:	e023      	b.n	80070a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	dc02      	bgt.n	800706e <USBD_GetConfig+0x2e>
 8007068:	2b00      	cmp	r3, #0
 800706a:	dc03      	bgt.n	8007074 <USBD_GetConfig+0x34>
 800706c:	e015      	b.n	800709a <USBD_GetConfig+0x5a>
 800706e:	2b03      	cmp	r3, #3
 8007070:	d00b      	beq.n	800708a <USBD_GetConfig+0x4a>
 8007072:	e012      	b.n	800709a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3308      	adds	r3, #8
 800707e:	2201      	movs	r2, #1
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f948 	bl	8007318 <USBD_CtlSendData>
        break;
 8007088:	e00c      	b.n	80070a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3304      	adds	r3, #4
 800708e:	2201      	movs	r2, #1
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f940 	bl	8007318 <USBD_CtlSendData>
        break;
 8007098:	e004      	b.n	80070a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8be 	bl	800721e <USBD_CtlError>
        break;
 80070a2:	bf00      	nop
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d81e      	bhi.n	8007102 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	88db      	ldrh	r3, [r3, #6]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d004      	beq.n	80070d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8a5 	bl	800721e <USBD_CtlError>
        break;
 80070d4:	e01a      	b.n	800710c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f043 0202 	orr.w	r2, r3, #2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	330c      	adds	r3, #12
 80070f6:	2202      	movs	r2, #2
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f90c 	bl	8007318 <USBD_CtlSendData>
      break;
 8007100:	e004      	b.n	800710c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f88a 	bl	800721e <USBD_CtlError>
      break;
 800710a:	bf00      	nop
  }
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	885b      	ldrh	r3, [r3, #2]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d107      	bne.n	8007136 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f94c 	bl	80073cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007134:	e013      	b.n	800715e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d10b      	bne.n	8007156 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	889b      	ldrh	r3, [r3, #4]
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	b29b      	uxth	r3, r3
 8007146:	b2da      	uxtb	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f93c 	bl	80073cc <USBD_CtlSendStatus>
}
 8007154:	e003      	b.n	800715e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f860 	bl	800721e <USBD_CtlError>
}
 800715e:	bf00      	nop
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007176:	b2db      	uxtb	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	2b02      	cmp	r3, #2
 800717c:	d80b      	bhi.n	8007196 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d10c      	bne.n	80071a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f91c 	bl	80073cc <USBD_CtlSendStatus>
      }
      break;
 8007194:	e004      	b.n	80071a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f840 	bl	800721e <USBD_CtlError>
      break;
 800719e:	e000      	b.n	80071a2 <USBD_ClrFeature+0x3c>
      break;
 80071a0:	bf00      	nop
  }
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	781a      	ldrb	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3301      	adds	r3, #1
 80071d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7ff fa40 	bl	800665a <SWAPBYTE>
 80071da:	4603      	mov	r3, r0
 80071dc:	461a      	mov	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7ff fa33 	bl	800665a <SWAPBYTE>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3301      	adds	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3301      	adds	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff fa26 	bl	800665a <SWAPBYTE>
 800720e:	4603      	mov	r3, r0
 8007210:	461a      	mov	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	80da      	strh	r2, [r3, #6]
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007228:	2180      	movs	r1, #128	@ 0x80
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fcec 	bl	8007c08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007230:	2100      	movs	r1, #0
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fce8 	bl	8007c08 <USBD_LL_StallEP>
}
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d042      	beq.n	80072dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800725a:	6938      	ldr	r0, [r7, #16]
 800725c:	f000 f842 	bl	80072e4 <USBD_GetLen>
 8007260:	4603      	mov	r3, r0
 8007262:	3301      	adds	r3, #1
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726a:	d808      	bhi.n	800727e <USBD_GetString+0x3e>
 800726c:	6938      	ldr	r0, [r7, #16]
 800726e:	f000 f839 	bl	80072e4 <USBD_GetLen>
 8007272:	4603      	mov	r3, r0
 8007274:	3301      	adds	r3, #1
 8007276:	b29b      	uxth	r3, r3
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	e001      	b.n	8007282 <USBD_GetString+0x42>
 800727e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	4413      	add	r3, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7812      	ldrb	r2, [r2, #0]
 8007290:	701a      	strb	r2, [r3, #0]
  idx++;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	3301      	adds	r3, #1
 8007296:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4413      	add	r3, r2
 800729e:	2203      	movs	r2, #3
 80072a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	3301      	adds	r3, #1
 80072a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072a8:	e013      	b.n	80072d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	4413      	add	r3, r2
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	7812      	ldrb	r2, [r2, #0]
 80072b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	3301      	adds	r3, #1
 80072ba:	613b      	str	r3, [r7, #16]
    idx++;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	3301      	adds	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	4413      	add	r3, r2
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	3301      	adds	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e7      	bne.n	80072aa <USBD_GetString+0x6a>
 80072da:	e000      	b.n	80072de <USBD_GetString+0x9e>
    return;
 80072dc:	bf00      	nop
  }
}
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072f4:	e005      	b.n	8007302 <USBD_GetLen+0x1e>
  {
    len++;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	3301      	adds	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	3301      	adds	r3, #1
 8007300:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1f5      	bne.n	80072f6 <USBD_GetLen+0x12>
  }

  return len;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2202      	movs	r2, #2
 8007328:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	2100      	movs	r1, #0
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 fceb 	bl	8007d1a <USBD_LL_Transmit>

  return USBD_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	2100      	movs	r1, #0
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fcda 	bl	8007d1a <USBD_LL_Transmit>

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2203      	movs	r2, #3
 8007380:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	2100      	movs	r1, #0
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fcde 	bl	8007d5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	2100      	movs	r1, #0
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fccd 	bl	8007d5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2204      	movs	r2, #4
 80073d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073dc:	2300      	movs	r3, #0
 80073de:	2200      	movs	r2, #0
 80073e0:	2100      	movs	r1, #0
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fc99 	bl	8007d1a <USBD_LL_Transmit>

  return USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2205      	movs	r2, #5
 80073fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007402:	2300      	movs	r3, #0
 8007404:	2200      	movs	r2, #0
 8007406:	2100      	movs	r1, #0
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fca7 	bl	8007d5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800741c:	2200      	movs	r2, #0
 800741e:	4912      	ldr	r1, [pc, #72]	@ (8007468 <MX_USB_DEVICE_Init+0x50>)
 8007420:	4812      	ldr	r0, [pc, #72]	@ (800746c <MX_USB_DEVICE_Init+0x54>)
 8007422:	f7fe fcf7 	bl	8005e14 <USBD_Init>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800742c:	f7f9 f9f2 	bl	8000814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007430:	490f      	ldr	r1, [pc, #60]	@ (8007470 <MX_USB_DEVICE_Init+0x58>)
 8007432:	480e      	ldr	r0, [pc, #56]	@ (800746c <MX_USB_DEVICE_Init+0x54>)
 8007434:	f7fe fd1e 	bl	8005e74 <USBD_RegisterClass>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800743e:	f7f9 f9e9 	bl	8000814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007442:	490c      	ldr	r1, [pc, #48]	@ (8007474 <MX_USB_DEVICE_Init+0x5c>)
 8007444:	4809      	ldr	r0, [pc, #36]	@ (800746c <MX_USB_DEVICE_Init+0x54>)
 8007446:	f7fe fc15 	bl	8005c74 <USBD_CDC_RegisterInterface>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007450:	f7f9 f9e0 	bl	8000814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007454:	4805      	ldr	r0, [pc, #20]	@ (800746c <MX_USB_DEVICE_Init+0x54>)
 8007456:	f7fe fd43 	bl	8005ee0 <USBD_Start>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007460:	f7f9 f9d8 	bl	8000814 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007464:	bf00      	nop
 8007466:	bd80      	pop	{r7, pc}
 8007468:	200000ac 	.word	0x200000ac
 800746c:	200001e0 	.word	0x200001e0
 8007470:	20000018 	.word	0x20000018
 8007474:	20000098 	.word	0x20000098

08007478 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800747c:	2200      	movs	r2, #0
 800747e:	4905      	ldr	r1, [pc, #20]	@ (8007494 <CDC_Init_FS+0x1c>)
 8007480:	4805      	ldr	r0, [pc, #20]	@ (8007498 <CDC_Init_FS+0x20>)
 8007482:	f7fe fc11 	bl	8005ca8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007486:	4905      	ldr	r1, [pc, #20]	@ (800749c <CDC_Init_FS+0x24>)
 8007488:	4803      	ldr	r0, [pc, #12]	@ (8007498 <CDC_Init_FS+0x20>)
 800748a:	f7fe fc2f 	bl	8005cec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800748e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000cbc 	.word	0x20000cbc
 8007498:	200001e0 	.word	0x200001e0
 800749c:	200004bc 	.word	0x200004bc

080074a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	6039      	str	r1, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
 80074bc:	4613      	mov	r3, r2
 80074be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	2b23      	cmp	r3, #35	@ 0x23
 80074c4:	d84a      	bhi.n	800755c <CDC_Control_FS+0xac>
 80074c6:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <CDC_Control_FS+0x1c>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	0800755d 	.word	0x0800755d
 80074d0:	0800755d 	.word	0x0800755d
 80074d4:	0800755d 	.word	0x0800755d
 80074d8:	0800755d 	.word	0x0800755d
 80074dc:	0800755d 	.word	0x0800755d
 80074e0:	0800755d 	.word	0x0800755d
 80074e4:	0800755d 	.word	0x0800755d
 80074e8:	0800755d 	.word	0x0800755d
 80074ec:	0800755d 	.word	0x0800755d
 80074f0:	0800755d 	.word	0x0800755d
 80074f4:	0800755d 	.word	0x0800755d
 80074f8:	0800755d 	.word	0x0800755d
 80074fc:	0800755d 	.word	0x0800755d
 8007500:	0800755d 	.word	0x0800755d
 8007504:	0800755d 	.word	0x0800755d
 8007508:	0800755d 	.word	0x0800755d
 800750c:	0800755d 	.word	0x0800755d
 8007510:	0800755d 	.word	0x0800755d
 8007514:	0800755d 	.word	0x0800755d
 8007518:	0800755d 	.word	0x0800755d
 800751c:	0800755d 	.word	0x0800755d
 8007520:	0800755d 	.word	0x0800755d
 8007524:	0800755d 	.word	0x0800755d
 8007528:	0800755d 	.word	0x0800755d
 800752c:	0800755d 	.word	0x0800755d
 8007530:	0800755d 	.word	0x0800755d
 8007534:	0800755d 	.word	0x0800755d
 8007538:	0800755d 	.word	0x0800755d
 800753c:	0800755d 	.word	0x0800755d
 8007540:	0800755d 	.word	0x0800755d
 8007544:	0800755d 	.word	0x0800755d
 8007548:	0800755d 	.word	0x0800755d
 800754c:	0800755d 	.word	0x0800755d
 8007550:	0800755d 	.word	0x0800755d
 8007554:	0800755d 	.word	0x0800755d
 8007558:	0800755d 	.word	0x0800755d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800755c:	bf00      	nop
  }

  return (USBD_OK);
 800755e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4805      	ldr	r0, [pc, #20]	@ (8007590 <CDC_Receive_FS+0x24>)
 800757a:	f7fe fbb7 	bl	8005cec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800757e:	4804      	ldr	r0, [pc, #16]	@ (8007590 <CDC_Receive_FS+0x24>)
 8007580:	f7fe fc12 	bl	8005da8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007584:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	200001e0 	.word	0x200001e0

08007594 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075a4:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <CDC_Transmit_FS+0x48>)
 80075a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e00b      	b.n	80075d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075ba:	887b      	ldrh	r3, [r7, #2]
 80075bc:	461a      	mov	r2, r3
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4806      	ldr	r0, [pc, #24]	@ (80075dc <CDC_Transmit_FS+0x48>)
 80075c2:	f7fe fb71 	bl	8005ca8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075c6:	4805      	ldr	r0, [pc, #20]	@ (80075dc <CDC_Transmit_FS+0x48>)
 80075c8:	f7fe fbae 	bl	8005d28 <USBD_CDC_TransmitPacket>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200001e0 	.word	0x200001e0

080075e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	6039      	str	r1, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2212      	movs	r2, #18
 8007614:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007616:	4b03      	ldr	r3, [pc, #12]	@ (8007624 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	200000c8 	.word	0x200000c8

08007628 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2204      	movs	r2, #4
 8007638:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800763a:	4b03      	ldr	r3, [pc, #12]	@ (8007648 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	200000dc 	.word	0x200000dc

0800764c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	6039      	str	r1, [r7, #0]
 8007656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	4907      	ldr	r1, [pc, #28]	@ (8007680 <USBD_FS_ProductStrDescriptor+0x34>)
 8007662:	4808      	ldr	r0, [pc, #32]	@ (8007684 <USBD_FS_ProductStrDescriptor+0x38>)
 8007664:	f7ff fdec 	bl	8007240 <USBD_GetString>
 8007668:	e004      	b.n	8007674 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	4904      	ldr	r1, [pc, #16]	@ (8007680 <USBD_FS_ProductStrDescriptor+0x34>)
 800766e:	4805      	ldr	r0, [pc, #20]	@ (8007684 <USBD_FS_ProductStrDescriptor+0x38>)
 8007670:	f7ff fde6 	bl	8007240 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007674:	4b02      	ldr	r3, [pc, #8]	@ (8007680 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	200014bc 	.word	0x200014bc
 8007684:	08007ebc 	.word	0x08007ebc

08007688 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	4904      	ldr	r1, [pc, #16]	@ (80076a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007698:	4804      	ldr	r0, [pc, #16]	@ (80076ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800769a:	f7ff fdd1 	bl	8007240 <USBD_GetString>
  return USBD_StrDesc;
 800769e:	4b02      	ldr	r3, [pc, #8]	@ (80076a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	200014bc 	.word	0x200014bc
 80076ac:	08007ed4 	.word	0x08007ed4

080076b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	6039      	str	r1, [r7, #0]
 80076ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	221a      	movs	r2, #26
 80076c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076c2:	f000 f843 	bl	800774c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076c6:	4b02      	ldr	r3, [pc, #8]	@ (80076d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	200000e0 	.word	0x200000e0

080076d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	6039      	str	r1, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	4907      	ldr	r1, [pc, #28]	@ (8007708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076ea:	4808      	ldr	r0, [pc, #32]	@ (800770c <USBD_FS_ConfigStrDescriptor+0x38>)
 80076ec:	f7ff fda8 	bl	8007240 <USBD_GetString>
 80076f0:	e004      	b.n	80076fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	4904      	ldr	r1, [pc, #16]	@ (8007708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076f6:	4805      	ldr	r0, [pc, #20]	@ (800770c <USBD_FS_ConfigStrDescriptor+0x38>)
 80076f8:	f7ff fda2 	bl	8007240 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076fc:	4b02      	ldr	r3, [pc, #8]	@ (8007708 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	200014bc 	.word	0x200014bc
 800770c:	08007ee8 	.word	0x08007ee8

08007710 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d105      	bne.n	800772e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4907      	ldr	r1, [pc, #28]	@ (8007744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007726:	4808      	ldr	r0, [pc, #32]	@ (8007748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007728:	f7ff fd8a 	bl	8007240 <USBD_GetString>
 800772c:	e004      	b.n	8007738 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	4904      	ldr	r1, [pc, #16]	@ (8007744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007732:	4805      	ldr	r0, [pc, #20]	@ (8007748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007734:	f7ff fd84 	bl	8007240 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007738:	4b02      	ldr	r3, [pc, #8]	@ (8007744 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	200014bc 	.word	0x200014bc
 8007748:	08007ef4 	.word	0x08007ef4

0800774c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007752:	4b0f      	ldr	r3, [pc, #60]	@ (8007790 <Get_SerialNum+0x44>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007758:	4b0e      	ldr	r3, [pc, #56]	@ (8007794 <Get_SerialNum+0x48>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800775e:	4b0e      	ldr	r3, [pc, #56]	@ (8007798 <Get_SerialNum+0x4c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4413      	add	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007772:	2208      	movs	r2, #8
 8007774:	4909      	ldr	r1, [pc, #36]	@ (800779c <Get_SerialNum+0x50>)
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 f814 	bl	80077a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800777c:	2204      	movs	r2, #4
 800777e:	4908      	ldr	r1, [pc, #32]	@ (80077a0 <Get_SerialNum+0x54>)
 8007780:	68b8      	ldr	r0, [r7, #8]
 8007782:	f000 f80f 	bl	80077a4 <IntToUnicode>
  }
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	1fff7a10 	.word	0x1fff7a10
 8007794:	1fff7a14 	.word	0x1fff7a14
 8007798:	1fff7a18 	.word	0x1fff7a18
 800779c:	200000e2 	.word	0x200000e2
 80077a0:	200000f2 	.word	0x200000f2

080077a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077b6:	2300      	movs	r3, #0
 80077b8:	75fb      	strb	r3, [r7, #23]
 80077ba:	e027      	b.n	800780c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	0f1b      	lsrs	r3, r3, #28
 80077c0:	2b09      	cmp	r3, #9
 80077c2:	d80b      	bhi.n	80077dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	0f1b      	lsrs	r3, r3, #28
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4619      	mov	r1, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	440b      	add	r3, r1
 80077d4:	3230      	adds	r2, #48	@ 0x30
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	e00a      	b.n	80077f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	0f1b      	lsrs	r3, r3, #28
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	4619      	mov	r1, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	440b      	add	r3, r1
 80077ec:	3237      	adds	r2, #55	@ 0x37
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	3301      	adds	r3, #1
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	3301      	adds	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
 800780c:	7dfa      	ldrb	r2, [r7, #23]
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	429a      	cmp	r2, r3
 8007812:	d3d3      	bcc.n	80077bc <IntToUnicode+0x18>
  }
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
	...

08007824 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	@ 0x28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800782c:	f107 0314 	add.w	r3, r7, #20
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	605a      	str	r2, [r3, #4]
 8007836:	609a      	str	r2, [r3, #8]
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007844:	d13a      	bne.n	80078bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	4b1e      	ldr	r3, [pc, #120]	@ (80078c4 <HAL_PCD_MspInit+0xa0>)
 800784c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784e:	4a1d      	ldr	r2, [pc, #116]	@ (80078c4 <HAL_PCD_MspInit+0xa0>)
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	6313      	str	r3, [r2, #48]	@ 0x30
 8007856:	4b1b      	ldr	r3, [pc, #108]	@ (80078c4 <HAL_PCD_MspInit+0xa0>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007862:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007868:	2302      	movs	r3, #2
 800786a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786c:	2300      	movs	r3, #0
 800786e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007870:	2303      	movs	r3, #3
 8007872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007874:	230a      	movs	r3, #10
 8007876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	4619      	mov	r1, r3
 800787e:	4812      	ldr	r0, [pc, #72]	@ (80078c8 <HAL_PCD_MspInit+0xa4>)
 8007880:	f7fa faaa 	bl	8001dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007884:	4b0f      	ldr	r3, [pc, #60]	@ (80078c4 <HAL_PCD_MspInit+0xa0>)
 8007886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007888:	4a0e      	ldr	r2, [pc, #56]	@ (80078c4 <HAL_PCD_MspInit+0xa0>)
 800788a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800788e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <HAL_PCD_MspInit+0xa0>)
 8007896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007898:	4a0a      	ldr	r2, [pc, #40]	@ (80078c4 <HAL_PCD_MspInit+0xa0>)
 800789a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800789e:	6453      	str	r3, [r2, #68]	@ 0x44
 80078a0:	4b08      	ldr	r3, [pc, #32]	@ (80078c4 <HAL_PCD_MspInit+0xa0>)
 80078a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078ac:	2200      	movs	r2, #0
 80078ae:	2100      	movs	r1, #0
 80078b0:	2043      	movs	r0, #67	@ 0x43
 80078b2:	f7f9 ff70 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078b6:	2043      	movs	r0, #67	@ 0x43
 80078b8:	f7f9 ff89 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078bc:	bf00      	nop
 80078be:	3728      	adds	r7, #40	@ 0x28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	40023800 	.word	0x40023800
 80078c8:	40020000 	.word	0x40020000

080078cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078e0:	4619      	mov	r1, r3
 80078e2:	4610      	mov	r0, r2
 80078e4:	f7fe fb49 	bl	8005f7a <USBD_LL_SetupStage>
}
 80078e8:	bf00      	nop
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007902:	78fa      	ldrb	r2, [r7, #3]
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	4613      	mov	r3, r2
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	440b      	add	r3, r1
 8007910:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	4619      	mov	r1, r3
 800791a:	f7fe fb83 	bl	8006024 <USBD_LL_DataOutStage>
}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	3320      	adds	r3, #32
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	4619      	mov	r1, r3
 800794e:	f7fe fc1c 	bl	800618a <USBD_LL_DataInStage>
}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fd56 	bl	800641a <USBD_LL_SOF>
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800797e:	2301      	movs	r3, #1
 8007980:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	79db      	ldrb	r3, [r3, #7]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
 800798e:	e008      	b.n	80079a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	79db      	ldrb	r3, [r3, #7]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d102      	bne.n	800799e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
 800799c:	e001      	b.n	80079a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800799e:	f7f8 ff39 	bl	8000814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079a8:	7bfa      	ldrb	r2, [r7, #15]
 80079aa:	4611      	mov	r1, r2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fe fcf0 	bl	8006392 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fc98 	bl	80062ee <USBD_LL_Reset>
}
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fceb 	bl	80063b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6812      	ldr	r2, [r2, #0]
 80079ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7adb      	ldrb	r3, [r3, #11]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079fc:	4b04      	ldr	r3, [pc, #16]	@ (8007a10 <HAL_PCD_SuspendCallback+0x48>)
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	4a03      	ldr	r2, [pc, #12]	@ (8007a10 <HAL_PCD_SuspendCallback+0x48>)
 8007a02:	f043 0306 	orr.w	r3, r3, #6
 8007a06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a08:	bf00      	nop
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	e000ed00 	.word	0xe000ed00

08007a14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fce1 	bl	80063ea <USBD_LL_Resume>
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fd39 	bl	80064be <USBD_LL_IsoOUTIncomplete>
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fcf5 	bl	800645a <USBD_LL_IsoINIncomplete>
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe fd4b 	bl	8006522 <USBD_LL_DevConnected>
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fd48 	bl	8006538 <USBD_LL_DevDisconnected>
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d13c      	bne.n	8007b3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ac0:	4a20      	ldr	r2, [pc, #128]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1e      	ldr	r2, [pc, #120]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007acc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007ad2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007ad6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007ada:	2204      	movs	r2, #4
 8007adc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ade:	4b19      	ldr	r3, [pc, #100]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ae4:	4b17      	ldr	r3, [pc, #92]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007aea:	4b16      	ldr	r3, [pc, #88]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007aec:	2202      	movs	r2, #2
 8007aee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007af0:	4b14      	ldr	r3, [pc, #80]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007af6:	4b13      	ldr	r3, [pc, #76]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007afc:	4b11      	ldr	r3, [pc, #68]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b02:	4b10      	ldr	r3, [pc, #64]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b08:	4b0e      	ldr	r3, [pc, #56]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b0e:	480d      	ldr	r0, [pc, #52]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007b10:	f7fa fae6 	bl	80020e0 <HAL_PCD_Init>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b1a:	f7f8 fe7b 	bl	8000814 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b1e:	2180      	movs	r1, #128	@ 0x80
 8007b20:	4808      	ldr	r0, [pc, #32]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007b22:	f7fb fd12 	bl	800354a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b26:	2240      	movs	r2, #64	@ 0x40
 8007b28:	2100      	movs	r1, #0
 8007b2a:	4806      	ldr	r0, [pc, #24]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007b2c:	f7fb fcc6 	bl	80034bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b30:	2280      	movs	r2, #128	@ 0x80
 8007b32:	2101      	movs	r1, #1
 8007b34:	4803      	ldr	r0, [pc, #12]	@ (8007b44 <USBD_LL_Init+0x94>)
 8007b36:	f7fb fcc1 	bl	80034bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	200016bc 	.word	0x200016bc

08007b48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fa fbcd 	bl	80022fe <HAL_PCD_Start>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f942 	bl	8007df4 <USBD_Get_USB_Status>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	4608      	mov	r0, r1
 8007b88:	4611      	mov	r1, r2
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	70fb      	strb	r3, [r7, #3]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70bb      	strb	r3, [r7, #2]
 8007b94:	4613      	mov	r3, r2
 8007b96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ba6:	78bb      	ldrb	r3, [r7, #2]
 8007ba8:	883a      	ldrh	r2, [r7, #0]
 8007baa:	78f9      	ldrb	r1, [r7, #3]
 8007bac:	f7fb f8a1 	bl	8002cf2 <HAL_PCD_EP_Open>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 f91c 	bl	8007df4 <USBD_Get_USB_Status>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007be4:	78fa      	ldrb	r2, [r7, #3]
 8007be6:	4611      	mov	r1, r2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fb f8ec 	bl	8002dc6 <HAL_PCD_EP_Close>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 f8fd 	bl	8007df4 <USBD_Get_USB_Status>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fb f9a4 	bl	8002f74 <HAL_PCD_EP_SetStall>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 f8de 	bl	8007df4 <USBD_Get_USB_Status>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c60:	78fa      	ldrb	r2, [r7, #3]
 8007c62:	4611      	mov	r1, r2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fb f9e8 	bl	800303a <HAL_PCD_EP_ClrStall>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f8bf 	bl	8007df4 <USBD_Get_USB_Status>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	da0b      	bge.n	8007cb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ca6:	68f9      	ldr	r1, [r7, #12]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	3316      	adds	r3, #22
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	e00b      	b.n	8007cd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007cce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fa ffd5 	bl	8002caa <HAL_PCD_SetAddress>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 f874 	bl	8007df4 <USBD_Get_USB_Status>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b086      	sub	sp, #24
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	460b      	mov	r3, r1
 8007d28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d38:	7af9      	ldrb	r1, [r7, #11]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	f7fb f8df 	bl	8002f00 <HAL_PCD_EP_Transmit>
 8007d42:	4603      	mov	r3, r0
 8007d44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f853 	bl	8007df4 <USBD_Get_USB_Status>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d52:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d7a:	7af9      	ldrb	r1, [r7, #11]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	f7fb f86b 	bl	8002e5a <HAL_PCD_EP_Receive>
 8007d84:	4603      	mov	r3, r0
 8007d86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f832 	bl	8007df4 <USBD_Get_USB_Status>
 8007d90:	4603      	mov	r3, r0
 8007d92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d94:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fb f88b 	bl	8002ed0 <HAL_PCD_EP_GetRxCount>
 8007dba:	4603      	mov	r3, r0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007dcc:	4b03      	ldr	r3, [pc, #12]	@ (8007ddc <USBD_static_malloc+0x18>)
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	20001ba0 	.word	0x20001ba0

08007de0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]

}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d817      	bhi.n	8007e38 <USBD_Get_USB_Status+0x44>
 8007e08:	a201      	add	r2, pc, #4	@ (adr r2, 8007e10 <USBD_Get_USB_Status+0x1c>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007e21 	.word	0x08007e21
 8007e14:	08007e27 	.word	0x08007e27
 8007e18:	08007e2d 	.word	0x08007e2d
 8007e1c:	08007e33 	.word	0x08007e33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
    break;
 8007e24:	e00b      	b.n	8007e3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e26:	2303      	movs	r3, #3
 8007e28:	73fb      	strb	r3, [r7, #15]
    break;
 8007e2a:	e008      	b.n	8007e3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e30:	e005      	b.n	8007e3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e32:	2303      	movs	r3, #3
 8007e34:	73fb      	strb	r3, [r7, #15]
    break;
 8007e36:	e002      	b.n	8007e3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3c:	bf00      	nop
  }
  return usb_status;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <memset>:
 8007e4c:	4402      	add	r2, r0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d100      	bne.n	8007e56 <memset+0xa>
 8007e54:	4770      	bx	lr
 8007e56:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5a:	e7f9      	b.n	8007e50 <memset+0x4>

08007e5c <__libc_init_array>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e94 <__libc_init_array+0x38>)
 8007e60:	4c0d      	ldr	r4, [pc, #52]	@ (8007e98 <__libc_init_array+0x3c>)
 8007e62:	1b64      	subs	r4, r4, r5
 8007e64:	10a4      	asrs	r4, r4, #2
 8007e66:	2600      	movs	r6, #0
 8007e68:	42a6      	cmp	r6, r4
 8007e6a:	d109      	bne.n	8007e80 <__libc_init_array+0x24>
 8007e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e9c <__libc_init_array+0x40>)
 8007e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ea0 <__libc_init_array+0x44>)
 8007e70:	f000 f818 	bl	8007ea4 <_init>
 8007e74:	1b64      	subs	r4, r4, r5
 8007e76:	10a4      	asrs	r4, r4, #2
 8007e78:	2600      	movs	r6, #0
 8007e7a:	42a6      	cmp	r6, r4
 8007e7c:	d105      	bne.n	8007e8a <__libc_init_array+0x2e>
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e84:	4798      	blx	r3
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7ee      	b.n	8007e68 <__libc_init_array+0xc>
 8007e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8e:	4798      	blx	r3
 8007e90:	3601      	adds	r6, #1
 8007e92:	e7f2      	b.n	8007e7a <__libc_init_array+0x1e>
 8007e94:	08007f24 	.word	0x08007f24
 8007e98:	08007f24 	.word	0x08007f24
 8007e9c:	08007f24 	.word	0x08007f24
 8007ea0:	08007f28 	.word	0x08007f28

08007ea4 <_init>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr

08007eb0 <_fini>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr
